name: Rcvo – Déploiement en toute sécurité (projet racine)

on:
  push:
    branches: [ main, principal ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-west-3
  APP_NAME: rcvo-backend
  STAGING_ENV: Rcvo-Backend-staging
  PROD_ENV: Rcvo-Backend-prod
  BUCKET: rcvo-officiel
  BASE_SCHEME: http
  HEALTH_PATH: /health
  SYNC_HEALTH: /health
  VERIFY_HEALTH: /health
  LABEL: build-${{ github.sha }}-${{ github.run_id }}-${{ github.run_attempt }}-${{ github.run_number }}

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node 22
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install dependencies (auto fallback)
        run: |
          set +e
          npm ci
          CODE=$?
          set -e
          if [ $CODE -ne 0 ]; then
            echo "npm ci failed → fallback to npm install"
            rm -f package-lock.json npm-shrinkwrap.json
            npm install --no-audit --no-fund
          fi

      - name: Optional build
        run: npm run build --if-present

      - name: Pack app (exclude node_modules and .git)
        run: zip -r app.zip . -x "node_modules/*" ".git/*"

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload to S3
        run: aws s3 cp app.zip "s3://${{ env.BUCKET }}/${{ env.APP_NAME }}/${{ env.LABEL }}.zip"

  deploy-staging:
    name: deploy-staging
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Wait until STAGING is ready (pre-update)
        run: |
          for i in {1..120}; do
            OUT=$(aws elasticbeanstalk describe-environments --environment-names "${{ env.STAGING_ENV }}" \
              --query "Environments[0].[Status,AbortableOperationInProgress]" --output text)
            STATUS=$(echo "$OUT" | awk '{print $1}')
            ABRT=$(echo "$OUT" | awk '{print $2}')
            echo "Status=$STATUS Abortable=$ABRT"
            [ "$STATUS" = "Ready" ] && [ "$ABRT" = "false" ] && break
            sleep 10
          done

      - name: Create EB application version (idempotent)
        run: |
          aws elasticbeanstalk create-application-version \
            --application-name "${{ env.APP_NAME }}" \
            --version-label "${{ env.LABEL }}" \
            --source-bundle S3Bucket="${{ env.BUCKET }}",S3Key="${{ env.APP_NAME }}/${{ env.LABEL }}.zip" || true

      - name: Update STAGING (env vars + version, with retry)
        run: |
          for i in {1..30}; do
            set +e
            aws elasticbeanstalk update-environment \
              --environment-name "${{ env.STAGING_ENV }}" \
              --version-label "${{ env.LABEL }}" \
              --option-settings \
                Namespace=aws:elasticbeanstalk:application:environment,OptionName=PORT,Value=8080 \
                Namespace=aws:elasticbeanstalk:application:environment,OptionName=ALLOWED_ORIGIN,Value="*" \
                Namespace=aws:elasticbeanstalk:application:environment,OptionName=JWT_SECRET,Value="${{ secrets.RCVO_JWT_SECRET }}" \
                Namespace=aws:elasticbeanstalk:application:environment,OptionName=ADMIN_EMAIL,Value="${{ secrets.RCVO_ADMIN_EMAIL }}" \
                Namespace=aws:elasticbeanstalk:application:environment,OptionName=ADMIN_PASSWORD,Value="${{ secrets.RCVO_ADMIN_PASSWORD }}"
            CODE=$?
            set -e
            [ $CODE -eq 0 ] && echo "Update accepted." && break
            echo "Not ready yet, retry in 10s ($i/30)…"
            sleep 10
          done

          for i in {1..120}; do
            OUT=$(aws elasticbeanstalk describe-environments --environment-names "${{ env.STAGING_ENV }}" \
              --query "Environments[0].[Status,Health,AbortableOperationInProgress]" --output text)
            STATUS=$(echo "$OUT" | awk '{print $1}')
            HEALTH=$(echo "$OUT" | awk '{print $2}')
            ABRT=$(echo "$OUT" | awk '{print $3}')
            echo "Post: Status=$STATUS Health=$HEALTH Abortable=$ABRT"
            [ "$STATUS" = "Ready" ] && [ "$ABRT" = "false" ] && break
            sleep 15
          done

      - name: Wait GREEN (STAGING)
        run: |
          for i in {1..80}; do
            H=$(aws elasticbeanstalk describe-environments --environment-names "${{ env.STAGING_ENV }}" --query "Environments[0].Health" --output text)
            S=$(aws elasticbeanstalk describe-environments --environment-names "${{ env.STAGING_ENV }}" --query "Environments[0].Status" --output text)
            echo "Health=$H Status=$S"
            [ "$H" = "Green" ] && [ "$S" = "Ready" ] && exit 0
            sleep 15
          done
          echo "STAGING not Green/Ready in time"; exit 1

      - name: Smoke tests (STAGING)
        run: |
          URL="${{ env.BASE_SCHEME }}://$(aws elasticbeanstalk describe-environments --environment-names "${{ env.STAGING_ENV }}" --query "Environments[0].CNAME" --output text)"
          for p in "${{ env.HEALTH_PATH }}" "${{ env.SYNC_HEALTH }}" "${{ env.VERIFY_HEALTH }}"; do
            ok=0
            for i in {1..15}; do
              code=$(curl -sk -o /dev/null -w "%{http_code}" "${URL}${p}")
              echo "${p} -> ${code}"
              [ "$code" = "200" ] && ok=1 && break
              sleep 3
            done
            [ $ok -eq 1 ] || { echo "Smoke failed on ${p}"; exit 1; }
          done
