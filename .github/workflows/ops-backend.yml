name: Ops Backend (slash-commands)

on:
  issue_comment:
    types: [created]

permissions:
  id-token: write
  contents: read
  issues: write

env:
  REGION: eu-west-3
  APP_NAME: Rcvo-backend
  ENV_STAGING: Rcvo-Backend-staging
  ENV_PROD: Rcvo-Backend-prod
  ALLOWED: "AdminRcvo"  # ajoute d'autres users séparés par des virgules si besoin

jobs:
  ops:
    if: ${{ startsWith(github.event.comment.body, '/deploy ') || startsWith(github.event.comment.body, '/status ') }}
    runs-on: ubuntu-latest

    steps:
      - name: Check actor is allowed
        run: |
          ACTOR="${{ github.actor }}"
          IFS=',' read -ra USERS <<< "${ALLOWED}"
          OK=0; for U in "${USERS[@]}"; do [ "$U" = "$ACTOR" ] && OK=1; done
          [ $OK -eq 1 ] || { echo "User $ACTOR not allowed. Allowed: ${ALLOWED}"; exit 1; }

      - name: Parse command
        id: parse
        run: |
          BODY="${{ github.event.comment.body }}"
          CMD=$(echo "$BODY" | awk '{print $1}')
          ARG1=$(echo "$BODY" | awk '{print $2}')
          if [ "$ARG1" = "prod" ]; then
            echo "ROLE=arn:aws:iam::409818814260:role/RcvoDeployProdRole" >> $GITHUB_OUTPUT
            echo "ENV_NAME=${ENV_PROD}" >> $GITHUB_OUTPUT
          else
            echo "ROLE=arn:aws:iam::409818814260:role/RcvoDeployStagingRole" >> $GITHUB_OUTPUT
            echo "ENV_NAME=${ENV_STAGING}" >> $GITHUB_OUTPUT
          fi
          echo "CMD=$CMD" >> $GITHUB_OUTPUT

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.REGION }}
          role-to-assume: ${{ steps.parse.outputs.ROLE }}

      - uses: actions/checkout@v4

      - name: /status <staging|prod>
        if: ${{ steps.parse.outputs.CMD == '/status' }}
        run: |
          aws elasticbeanstalk describe-environments \
            --environment-names "${{ steps.parse.outputs.ENV_NAME }}" \
            --query 'Environments[0].[Status,Health,CNAME]' --output table

      - name: /deploy <staging|prod>
        if: ${{ steps.parse.outputs.CMD == '/deploy' }}
        run: |
          set -euo pipefail
          if [ -f package-lock.json ]; then npm ci; fi
          if [ -f package.json ] && jq -e '.scripts.build' package.json >/dev/null; then npm run build; fi
          zip -r app.zip . -x ".git/*" ".github/*" "node_modules/*"
          BUCKET=$(aws elasticbeanstalk create-storage-location --output text)
          VERSION="ops-$(date +%Y%m%d-%H%M%S)"
          aws s3 cp app.zip s3://$BUCKET/$VERSION.zip
          aws elasticbeanstalk create-application-version \
            --application-name "${APP_NAME}" \
            --version-label "$VERSION" \
            --source-bundle S3Bucket=$BUCKET,S3Key=$VERSION.zip
          aws elasticbeanstalk update-environment \
            --environment-name "${{ steps.parse.outputs.ENV_NAME }}" \
            --version-label "$VERSION"
          for i in {1..30}; do
            OUT=$(aws elasticbeanstalk describe-environments --environment-names "${{ steps.parse.outputs.ENV_NAME }}")
            STATUS=$(echo "$OUT" | jq -r '.Environments[0].Status')
            HEALTH=$(echo "$OUT" | jq -r '.Environments[0].Health')
            echo "STATUS=$STATUS HEALTH=$HEALTH"
            [ "$STATUS" = "Ready" ] && [ "$HEALTH" = "Green" ] && break
            sleep 30
          done
          CNAME=$(aws elasticbeanstalk describe-environments --environment-names "${{ steps.parse.outputs.ENV_NAME }}" --query 'Environments[0].CNAME' --output text)
          curl -k -sS -o /dev/null -w "%{http_code}\n" "https://${CNAME}/health" | tee /tmp/code.txt
          CODE=$(cat /tmp/code.txt)
          [ "$CODE" -ge 200 ] && [ "$CODE" -le 308 ]
