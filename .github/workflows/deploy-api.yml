name: Deploy backend (OIDC)

on:
  push:
    branches: [main, staging]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-west-3
  APP_NAME: Rcvo-backend
  PROD_ENV: rcvo-backend-b
  STAGING_ENV: Rcvo-Backend-staging

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Choisir l’environnement EB (selon la branche)
        id: envsel
        shell: bash
        run: |
          if [ "${GITHUB_REF_NAME}" = "main" ]; then
            ENV="${{ env.PROD_ENV }}"
          elif [ "${GITHUB_REF_NAME}" = "staging" ]; then
            ENV="${{ env.STAGING_ENV }}"
          else
            echo "Branche non supportée: ${GITHUB_REF_NAME}"; exit 2
          fi
          echo "name=$ENV" >> "$GITHUB_OUTPUT"
          echo "ENV résolu: $ENV"

      - name: Préparer l’archive (zip simple)
        run: |
          mkdir -p bundle
          git rev-parse HEAD > bundle/REVISION.txt
          zip -qr bundle/api.zip . -x ".git/*"

      - name: Récupérer l’ID du compte (pour le bucket EB)
        id: acct
        run: echo "id=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_OUTPUT

      - name: Uploader le bundle sur S3 (bucket EB)
        id: up
        env:
          S3B: elasticbeanstalk-${{ env.AWS_REGION }}-${{ steps.acct.outputs.id }}
          S3K: rcvo-api/${{ github.run_id }}-${{ github.run_attempt }}.zip
        run: |
          aws s3 cp bundle/api.zip "s3://${S3B}/${S3K}"
          echo "bucket=$S3B" >> $GITHUB_OUTPUT
          echo "key=$S3K" >> $GITHUB_OUTPUT

      - name: Créer la version EB (idempotent)
        id: av
        env:
          LABEL: deploy-${{ github.run_id }}-${{ github.run_attempt }}
        run: |
          set -e
          if aws elasticbeanstalk describe-application-versions \
               --application-name "${{ env.APP_NAME }}" \
               --version-label "${LABEL}" --query 'ApplicationVersions[0].VersionLabel' --output text | grep -q "${LABEL}"; then
            echo "Version ${LABEL} déjà existante (OK)"
          else
            aws elasticbeanstalk create-application-version \
              --application-name "${{ env.APP_NAME }}" \
              --version-label "${LABEL}" \
              --source-bundle S3Bucket="${{ steps.up.outputs.bucket }}",S3Key="${{ steps.up.outputs.key }}"
          fi
          echo "label=${LABEL}" >> $GITHUB_OUTPUT

      - name: Mettre à jour l’environnement EB
        run: |
          aws elasticbeanstalk update-environment \
            --environment-name "${{ steps.envsel.outputs.name }}" \
            --version-label "${{ steps.av.outputs.label }}"

      - name: Attendre Ready/Green
        timeout-minutes: 15
        run: |
          for i in {1..90}; do
            read -r STATUS HEALTH VERSION URL <<<"$(aws elasticbeanstalk describe-environments \
              --environment-names "${{ steps.envsel.outputs.name }}" \
              --query 'Environments[0].[Status,Health,VersionLabel,EndpointURL]' --output text)"
            echo "  - $STATUS / $HEALTH ($VERSION) $URL"
            if [ "$STATUS" = "Ready" ] && [ "$HEALTH" = "Green" ]; then
              exit 0
            fi
            sleep 10
          done
          echo "Environnement non Ready/Green dans le délai"; exit 1
