name: Déployer le backend Rcvo (OIDC)

on:
  workflow_dispatch:
    inputs:
      env:
        description: "Cible"
        type: choice
        required: true
        options: [staging, prod]
        default: prod

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-west-3
  APP_NAME: Rcvo-backend
  ENV_STAGING: Rcvo-Backend-staging
  ENV_PROD: Rcvo-Backend-prod

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configurer AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Résoudre l'environnement cible
        id: envname
        run: |
          if [ "${{ inputs.env }}" = "prod" ]; then
            echo "NAME=${{ env.ENV_PROD }}" >> $GITHUB_OUTPUT
          else
            echo "NAME=${{ env.ENV_STAGING }}" >> $GITHUB_OUTPUT
          fi

      - name: Préparer artefact (zip)
        run: |
          set -euo pipefail
          mkdir -p .bundle
          tar -czf .bundle/api.tar.gz \
            --exclude='.git' --exclude='node_modules' .

      - name: Créer / réutiliser version EB (idempotent)
        id: mkver
        run: |
          set -euo pipefail
          ACC=$(aws sts get-caller-identity --query Account --output text)
          BUCKET="elasticbeanstalk-${{ env.AWS_REGION }}-${ACC}"
          LABEL="api-$(date +%Y%m%d-%H%M%S)"
          KEY="archive/${LABEL}.tar.gz"

          # upload artefact
          aws s3 cp .bundle/api.tar.gz "s3://${BUCKET}/${KEY}" --storage-class STANDARD

          # si la version existe déjà, on ne recrée pas
          if aws elasticbeanstalk describe-application-versions \
              --application-name "${{ env.APP_NAME }}" \
              --version-labels "${LABEL}" --query 'ApplicationVersions[0].VersionLabel' --output text | grep -q "${LABEL}"; then
            echo "Version ${LABEL} existe déjà, on réutilise."
          else
            aws elasticbeanstalk create-application-version \
              --application-name "${{ env.APP_NAME }}" \
              --version-label "${LABEL}" \
              --source-bundle S3Bucket="${BUCKET}",S3Key="${KEY}" >/dev/null
          fi
          echo "LABEL=${LABEL}" >> $GITHUB_OUTPUT

      - name: Déployer sur ${{ steps.envname.outputs.NAME }}
        run: |
          set
