name: Déployer le backend Rcvo (API) sur Elastic Beanstalk

on:
  push:
    branches: [ main, staging ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  EB_APP_NAME: ${{ secrets.EB_APP_NAME }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Configurer AWS via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Déterminer l'environnement cible
        id: env
        run: |
          set -euo pipefail
          REF="${GITHUB_REF_NAME}"
          if [ "$REF" = "main" ]; then
            ENV="rcvo-backend-b"              # PROD
          elif [ "$REF" = "staging" ]; then
            ENV="Rcvo-Backend-staging"       # STAGING
          else
            echo "Branche $REF non supportée (seules main/staging)"; exit 2
          fi
          echo "name=$ENV" >> "$GITHUB_OUTPUT"

      - uses: actions/checkout@v4

      - name: Pack (api.zip)
        run: |
          set -euo pipefail
          zip -qr api.zip . -x ".git/*"

      - name: Push S3 + créer version EB
        id: ver
        run: |
          set -euo pipefail
          TS=$(date +%Y%m%d-%H%M%S)
          LABEL="api-${TS}"
          ACC=$(aws sts get-caller-identity --query Account --output text)
          S3B="elasticbeanstalk-${AWS_REGION}-${ACC}"
          S3K="${EB_APP_NAME}/${LABEL}.zip"
          aws s3 cp api.zip "s3://${S3B}/${S3K}"

          # idempotent
          aws elasticbeanstalk create-application-version \
            --application-name "$EB_APP_NAME" \
            --version-label "$LABEL" \
            --source-bundle S3Bucket="$S3B",S3Key="$S3K" \
          2>err.log || { grep -q "already exists" err.log || (cat err.log && exit 1); }

          echo "label=$LABEL" >> "$GITHUB_OUTPUT"

      - name: Vérifier l'existence de l'env EB (fail rapide)
        run: |
          set -euo pipefail
          aws elasticbeanstalk describe-environments \
            --environment-names "${{ steps.env.outputs.name }}" \
            --query 'Environments[0].EnvironmentName' --output text | grep .

      - name: Déployer sur EB
        run: |
          set -euo pipefail
          aws elasticbeanstalk update-environment \
            --environment-name "${{ steps.env.outputs.name }}" \
            --version-label "${{ steps.ver.outputs.label }}"
