name: Deploy backend (OIDC)

on:
  push:
    branches: [main, staging]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # 1) Code
      - name: Checkout
        uses: actions/checkout@v4

      # 2) OIDC -> AWS
      - name: Configure AWS via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: eu-west-3

      # 3) Choisir l'environnement EB cible
      - name: Resolve target environment
        id: env
        shell: bash
        run: |
          set -euo pipefail
          REF="${GITHUB_REF_NAME}"
          if [ "$REF" = "main" ]; then
            ENV="rcvo-backend-b"            # PROD (existant)
          elif [ "$REF" = "staging" ]; then
            ENV="Rcvo-Backend-staging"      # STAGING (existant)
          else
            echo "Branche $REF non supportée (main/staging)"; exit 2
          fi
          echo "name=$ENV" >> "$GITHUB_OUTPUT"

      # 4) Créer l'archive à déployer (adapté: zip tout le repo)
      - name: Build & archive
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p bundle
          # Si tu as un build Node, fais-le ici (npm ci && npm run build)
          # À défaut on zipe le repo (sans .git)
          tar -czf bundle/api.tgz --exclude .git .
          rm -f bundle/api.zip && cp bundle/api.tgz bundle/api.zip
          test -f bundle/api.zip

      # 5) Créer la version EB (idempotent) et uploader sur S3 EB
      - name: Create EB application version
        id: publish
        shell: bash
        run: |
          set -euo pipefail
          APP="Rcvo-backend"
          LABEL="api-${{ github.run_id }}-${{ github.run_attempt }}"
          ACC=$(aws sts get-caller-identity --query Account --output text)
          BUCKET="elasticbeanstalk-eu-west-3-$ACC"
          KEY="rcvo-api/${LABEL}.zip"

          aws s3 cp bundle/api.zip "s3://$BUCKET/$KEY" >/dev/null

          # Idempotent: only create if missing
          if ! aws elasticbeanstalk describe-application-versions \
                --application-name "$APP" \
                --version-labels "$LABEL" \
                --query 'ApplicationVersions[0].VersionLabel' \
                --output text | grep -q "$LABEL"; then
            aws elasticbeanstalk create-application-version \
              --application-name "$APP" \
              --version-label "$LABEL" \
              --source-bundle S3Bucket="$BUCKET",S3Key="$KEY" >/dev/null
          fi

          echo "label=$LABEL" >> "$GITHUB_OUTPUT"

      # 6) Déployer cette version sur l'env
      - name: Update EB environment
        shell: bash
        run: |
          set -euo pipefail
          aws elasticbeanstalk update-environment \
            --environment-name "${{ steps.env.outputs.name }}" \
            --version-label   "${{ steps.publish.outputs.label }}" >/dev/null
          echo "Déploiement -> ${{ steps.env.outputs.name }} / ${{ steps.publish.outputs.label }}"

      # 7) Attendre Ready/Green (max 15 minutes)
      - name: Wait for Ready/Green
        shell: bash
        run: |
          set -euo pipefail
          for i in {1..90}; do
            read S H <<<"$(aws elasticbeanstalk describe-environments \
              --environment-names '${{ steps.env.outputs.name }}' \
              --query 'Environments[0].[Status,Health]' --output text)"
            echo "  $i: $S / $H"
            if [ "$S" = "Ready" ] && [ "$H" = "Green" ]; then exit 0; fi
            sleep 10
          done
          echo "Timeout attente EB"; exit 1

      # 8) Smoke test /health
      - name: Smoke test /health
        shell: bash
        run: |
          set -euo pipefail
          URL="http://$(aws elasticbeanstalk describe-environments \
            --environment-names '${{ steps.env.outputs.name }}' \
            --query 'Environments[0].CNAME' --output text)"
          code=$(curl -sS -o /dev/null -w '%{http_code}' "$URL/health")
          echo "GET $URL/health -> $code"
          [ "$code" = "200" ]
