name: 🔧 AI Maintenance & CI

# Déclencheurs : manuel, push sur main, et cron quotidien
on:
  workflow_dispatch:
    inputs:
      change_request:
        description: 'Décris la modification à appliquer (IA)'
        required: true
  push:
    branches:
      - main
  schedule:
    - cron: '0 3 * * *' # tous les jours à 03:00 UTC

env:
  NODE_VERSION: '18'

jobs:
  # 1) Pré-check : checkout, install et tests de base
  precheck:
    name: 🔍 Pre-check (lint & tests)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache npm
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-cache-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Run tests
        run: npm test

  # 2) AI Patch : génère et applique un patch IA, puis crée un PR
  ai_patch:
    name: 🤖 Apply AI Patch
    needs: precheck
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Node.js & tools
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          npm install -g openai

      - name: Generate patch via OpenAI CLI
        id: gen
        run: |
          openai chat.completions.create \
            -m gpt-4 \
            -g user="Agis comme un dev : ${{ github.event.inputs.change_request }}. Fournis-moi un patch (diff) à appliquer sur ce repo." \
            --stream=false \
            > patch.diff

      - name: Validate patch
        run: git apply --check patch.diff

      - name: Apply patch
        run: git apply patch.diff

      - name: Re-run tests after patch
        run: |
          npm ci
          npm test

      - name: Commit & push AI branch
        run: |
          BRANCH="ai-update/${{ github.run_id }}"
          git checkout -b $BRANCH
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git add .
          git commit -m "AI update: ${{ github.event.inputs.change_request }}"
          git push -u origin $BRANCH

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "AI update: ${{ github.event.inputs.change_request }}"
          title: "🤖 AI update: ${{ github.event.inputs.change_request }}"
          body: |
            Ce PR centralise les modifications générées par l’IA pour :
            > ${{ github.event.inputs.change_request }}
          base: main
          head: ${{ steps.gen.outputs.branch || format('ai-update/{0}', github.run_id) }}
          labels: |
            automated
            ai-update
          reviewers: team-backend

  # 3) Docs : régénération et déploiement de la doc Swagger/MkDocs
  docs:
    name: 📚 Generate & Deploy Docs
    runs-on: ubuntu-latest
    needs: [precheck]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install mkdocs & plugins
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs mkdocs-material

      - name: Build docs
        run: mkdocs build --strict

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site

  # 4) Release semver automatique sur tag
  release:
    name: 🚀 Auto Release
    runs-on: ubuntu-latest
    needs: [precheck]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

  # 5) Monitoring (exemple Health Check)
  health_check:
    name: 💓 API Health Check
    runs-on: ubuntu-latest
    needs: [precheck]
    if: github.event_name == 'schedule'
    steps:
      - name: Curl API health endpoint
        run: |
          STATUS=$(curl -s -o /dev/null -w '%{http_code}' https://api.rcvo.example.com/health)
          if [ "$STATUS" -ne 200 ]; then
            echo "Health check failed with status $STATUS"
            exit 1
          fi
