name: Déploiement PROD sur Elastic Beanstalk (OIDC)

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths-ignore:
      - ".github/**"

permissions:
  id-token: write
  contents: read

concurrency:
  group: deploy-prod
  cancel-in-progress: false

env:
  AWS_REGION: eu-west-3
  APP_NAME: Rcvo-backend
  ENV_NAME: rcvo-backend-prod

jobs:
  deployer:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug contexte (repo/ref)
        run: |
          echo "GITHUB_REPOSITORY=$GITHUB_REPOSITORY"
          echo "GITHUB_REF=$GITHUB_REF"

      - name: Auth AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::409818814260:role/GithubOIDCRcvoDeploy
          aws-region: ${{ env.AWS_REGION }}

      - name: Vérifier identité AWS
        run: aws sts get-caller-identity

      - name: Installer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Installer dépendances
        shell: bash
        run: |
          set -euo pipefail
          if [ -f package-lock.json ]; then npm ci; else npm install; fi

      - name: (Optionnel) Build
        run: npm run build --if-present

      - name: Pack zip à déployer
        id: pack
        shell: bash
        run: |
          set -euo pipefail
          TS="$(date +%Y%m%d_%H%M%S)"
          SHA="${GITHUB_SHA::7}"
          ZIP="app-${SHA}-${TS}.zip"
          echo "zip=$ZIP" >> "$GITHUB_OUTPUT"
          zip -r "$ZIP" . -x ".git/*" "node_modules/*"

      - name: Bucket S3 EB (idempotent)
        id: bucket
        run: |
          BUCKET="$(aws elasticbeanstalk create-storage-location --query S3Bucket --output text)"
          echo "bucket=$BUCKET" >> "$GITHUB_OUTPUT"

      - name: Upload zip vers S3
        run: aws s3 cp "${{ steps.pack.outputs.zip }}" "s3://${{ steps.bucket.outputs.bucket }}/${{ steps.pack.outputs.zip }}"

      - name: Créer/enregistrer Application Version (idempotent)
        id: appver
        shell: bash
        run: |
          LABEL="${{ steps.pack.outputs.zip }}"
          aws elasticbeanstalk create-application-version \
            --application-name "${{ env.APP_NAME }}" \
            --version-label "$LABEL" \
            --source-bundle S3Bucket="${{ steps.bucket.outputs.bucket }}",S3Key="${{ steps.pack.outputs.zip }}" \
          || echo "Version déjà existante"
          echo "label=$LABEL" >> "$GITHUB_OUTPUT"

      - name: Déployer sur l'environnement
        run: |
          aws elasticbeanstalk update-environment \
            --environment-name "${{ env.ENV_NAME }}" \
            --version-label "${{ steps.appver.outputs.label }}"

      - name: Attendre GREEN
        shell: bash
        timeout-minutes: 20
        run: |
          set -euo pipefail
          for i in {1..60}; do
            OUT="$(aws elasticbeanstalk describe-environments \
              --environment-names "${{ env.ENV_NAME }}" \
              --query 'Environments[0].{S:Status,H:Health,HS:HealthStatus,V:VersionLabel}' \
              --output text || true)"
            echo "$OUT"
            S=$(echo "$OUT" | awk '{print $1}'); H=$(echo "$OUT" | awk '{print $2}')
            if [[ "$S" == "Ready" && "$H" == "Green" ]]; then exit 0; fi
            sleep 20
          done
          echo "Timeout en attente de GREEN"; exit 1

      - name: Smoke test /health (HTTPS prioritaire)
        shell: bash
        run: |
          set -euo pipefail
          CNAME="$(aws elasticbeanstalk describe-environments --environment-names "${{ env.ENV_NAME }}" --query 'Environments[0].CNAME' --output text)"
          echo "CNAME=$CNAME"
          code=$(curl -sk -o /dev/null -w "%{http_code}" "https://${CNAME}/health" || true)
          echo "HTTPS -> $code"
          if [[ "$code" != "200" ]]; then
            code=$(curl -s -o /dev/null -w "%{http_code}" "http://${CNAME}/health" || true)
            echo "HTTP -> $code"
          fi
          [[ "$code" == "200" ]] || (echo "Smoke test KO" && exit 1)
