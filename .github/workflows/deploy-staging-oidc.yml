name: Déploiement STAGING sur Elastic Beanstalk (OIDC)

on:
  push:
    branches: [ staging ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-west-3
  APP_NAME: Rcvo-backend                 # Nom exact de l'application EB
  ENV_NAME: Rcvo-Backend-staging        # Environnement EB cible (staging)

jobs:
  deployer:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::409818814260:role/GithubOIDCRcvoDeploy
          aws-region: ${{ env.AWS_REGION }}

      - name: Vérifier l’identité AWS
        run: aws sts get-caller-identity

      - name: Installer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Installer dépendances (lockfile si présent)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Build (facultatif)
        run: npm run build --if-present

      # ---------- Packaging & version ----------
      - name: Créer l’archive à déployer
        id: pack
        shell: bash
        run: |
          set -euo pipefail
          TS="$(date +%Y%m%d_%H%M%S)"
          SHA="${GITHUB_SHA::7}"
          ZIP="app-${SHA}-${TS}.zip"
          echo "zip=$ZIP" >> "$GITHUB_OUTPUT"
          # Exclure .git, node_modules et l’archive elle-même
          zip -r "$ZIP" . -x ".git/*" "node_modules/*" "$ZIP"

      - name: Déterminer le bucket EB (CreateStorageLocation idempotent)
        id: bucket
        shell: bash
        run: |
          set -euo pipefail
          BUCKET="$(aws elasticbeanstalk create-storage-location --region "${AWS_REGION}" --query S3Bucket --output text)"
          echo "bucket=$BUCKET" >> "$GITHUB_OUTPUT"

      - name: Upload vers S3
        run: |
          aws s3 cp "./${{ steps.pack.outputs.zip }}" "s3://${{ steps.bucket.outputs.bucket }}/${{ steps.pack.outputs.zip }}"

      - name: Créer/Enregistrer la version d’appli (idempotent)
        id: appver
        shell: bash
        run: |
          set -euo pipefail
          LABEL="${{ steps.pack.outputs.zip }}"
          aws elasticbeanstalk create-application-version \
            --region "${AWS_REGION}" \
            --application-name "${APP_NAME}" \
            --version-label "$LABEL" \
            --source-bundle S3Bucket="${{ steps.bucket.outputs.bucket }}",S3Key="${{ steps.pack.outputs.zip }}" \
          || echo "Version déjà existante, on continue."
          echo "label=$LABEL" >> "$GITHUB_OUTPUT"

      # ---------- Readiness AVANT déploiement ----------
      - name: Attendre que l’environnement soit prêt (pré-déploiement)
        shell: bash
        run: |
          set -euo pipefail
          for i in {1..60}; do
            OUT="$(aws elasticbeanstalk describe-environments \
              --region "${AWS_REGION}" \
              --environment-names "${ENV_NAME}" \
              --query 'Environments[0].[Health,Status]' \
              --output text || true)"
            echo "Sortie brute: $OUT"
            read -r HEALTH STATUS <<<"$OUT"
            echo "STATUS=$STATUS  HEALTH=$HEALTH"
            if [[ "$STATUS" == "Ready" && "$HEALTH" == "Green" ]]; then
              echo "✅ ${ENV_NAME} est prêt."
              exit 0
            fi
            sleep 10
          done
          echo "❌ ${ENV_NAME} pas prêt après ~10 min"
          exit 1

      # ---------- Déploiement ----------
      - name: Déployer sur l’environnement
        run: |
          aws elasticbeanstalk update-environment \
            --region "${AWS_REGION}" \
            --environment-name "${ENV_NAME}" \
            --version-label "${{ steps.appver.outputs.label }}"

      # ---------- Readiness APRÈS déploiement ----------
      - name: Attendre que l’environnement soit GREEN (post-déploiement)
        shell: bash
        timeout-minutes: 20
        run: |
          set -euo pipefail
          for i in {1..90}; do
            OUT="$(aws elasticbeanstalk describe-environments \
              --region "${AWS_REGION}" \
              --environment-names "${ENV_NAME}" \
              --query 'Environments[0].[Health,Status]' \
              --output text || true)"
            echo "Sortie brute: $OUT"
            read -r HEALTH STATUS <<<"$OUT"
            echo "STATUS=$STATUS  HEALTH=$HEALTH"
            if [[ "$STATUS" == "Ready" && "$HEALTH" == "Green" ]]; then
              echo "✅ Environnement prêt."
              exit 0
            fi
            sleep 10
          done
          echo "❌ Timeout d’attente (environnement non GREEN/Ready)"
          exit 1

      # ---------- Smoke test ----------
      - name: Test de fumée (/health) avec retries et fallback HTTP
        shell: bash
        run: |
          set -euo pipefail
          CNAME="$(aws elasticbeanstalk describe-environments \
            --region "${AWS_REGION}" \
            --environment-names "${ENV_NAME}" \
            --query 'Environments[0].CNAME' --output text)"
          echo "CNAME=${CNAME}"
          URLS=("https://${CNAME}/health" "http://${CNAME}/health")

          timeout=$((15*60))   # 15 minutes
          interval=10
          elapsed=0
          ok=0

          while (( elapsed < timeout )); do
            for URL in "${URLS[@]}"; do
              echo "Test: $URL"
              code=$(curl -sk -o /dev/null -w "%{http_code}" "$URL" || true)
              echo "Code HTTP: $code"
              if [[ "$code" == "200" ]]; then
                echo "✅ Health check OK via $URL"
                ok=1
                break 2
              fi
            done
            sleep $interval
            elapsed=$((elapsed + interval))
          done

          if [[ "$ok" -ne 1 ]]; then
            echo "❌ Health check KO après $timeout secondes"
            # Aide au debug : montre les en-têtes de la dernière tentative HTTPS
            curl -skI "https://${CNAME}/health" || true
            exit 1
          fi
