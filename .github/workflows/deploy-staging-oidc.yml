name: Déploiement STAGING sur Elastic Beanstalk (OIDC)

on:
  push:
    branches: [ main ]   # change à [ staging ] si tu veux déclencher sur la branche "staging"
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-west-3
  APP_NAME: Rcvo-backend                 # Nom exact de l'application EB
  ENV_NAME: Rcvo-Backend-staging         # Mets rcvo-backend-prod pour prod

jobs:
  deployer:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::409818814260:role/GithubOIDCRcvoDeploy
          aws-region: ${{ env.AWS_REGION }}

      - name: Vérifier l’identité AWS
        run: aws sts get-caller-identity

      - name: Installer Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Installer dépendances (lockfile si présent)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Build (facultatif)
        run: npm run build --if-present

      - name: Créer l’archive à déployer
        id: pack
        shell: bash
        run: |
          set -euo pipefail
          TS="$(date +%Y%m%d_%H%M%S)"
          SHA="${GITHUB_SHA::7}"
          ZIP="app-${SHA}-${TS}.zip"
          echo "zip=$ZIP" >> "$GITHUB_OUTPUT"
          # Exclure .git, node_modules et l'archive elle-même
          zip -r "$ZIP" . -x ".git/*" "node_modules/*" "$ZIP"

      - name: Déterminer le bucket EB (CreateStorageLocation idempotent)
        id: bucket
        shell: bash
        run: |
          set -euo pipefail
          BUCKET="$(aws elasticbeanstalk create-storage-location \
            --region "${AWS_REGION}" \
            --query S3Bucket --output text)"
          echo "bucket=$BUCKET" >> "$GITHUB_OUTPUT"

      - name: Upload vers S3
        run: |
          aws s3 cp "${{ steps.pack.outputs.zip }}" \
            "s3://${{ steps.bucket.outputs.bucket }}/${{ steps.pack.outputs.zip }}"

      - name: Créer/Enregistrer la version d’appli
        id: appver
        shell: bash
        run: |
          set -euo pipefail
          LABEL="${{ steps.pack.outputs.zip }}"
          aws elasticbeanstalk create-application-version \
            --region "${AWS_REGION}" \
            --application-name "${APP_NAME}" \
            --version-label "$LABEL" \
            --source-bundle S3Bucket="${{ steps.bucket.outputs.bucket }}",S3Key="${{ steps.pack.outputs.zip }}" \
          || echo "Version déjà existante, on continue."
          echo "label=$LABEL" >> "$GITHUB_OUTPUT"

      - name: Attendre que l'environnement soit prêt (pré-déploiement)
        shell: bash
        run: |
          set -euo pipefail
          for i in {1..30}; do
            # On récupère Status et Health séparément pour éviter tout swap
            STATUS="$(aws elasticbeanstalk describe-environments \
              --region "${AWS_REGION}" \
              --environment-names "${ENV_NAME}" \
              --query 'Environments[0].Status' --output text)"
            HEALTH="$(aws elasticbeanstalk describe-environments \
              --region "${AWS_REGION}" \
              --environment-names "${ENV_NAME}" \
              --query 'Environments[0].Health' --output text)"
            echo "STATUS=$STATUS  HEALTH=$HEALTH"
            if [[ "$STATUS" == "Ready" && "$HEALTH" == "Green" ]]; then
              echo "✅ ${ENV_NAME} est prêt."
              exit 0
            fi
            sleep 10
          done
          echo "❌ ${ENV_NAME} pas prêt après ~5 min"; exit 1

      - name: Déployer sur l’environnement
        run: |
          aws elasticbeanstalk update-environment \
            --region "${{ env.AWS_REGION }}" \
            --environment-name "${ENV_NAME}" \
            --version-label "${{ steps.appver.outputs.label }}"

      - name: Attendre que l’environnement soit GREEN
        shell: bash
        timeout-minutes: 20
        run: |
          set -euo pipefail
          for i in {1..60}; do
            HEALTH="$(aws elasticbeanstalk describe-environments \
              --region "${AWS_REGION}" \
              --environment-names "${ENV_NAME}" \
              --query 'Environments[0].Health' --output text)"
            STATUS="$(aws elasticbeanstalk describe-environments \
              --region "${AWS_REGION}" \
              --environment-names "${ENV_NAME}" \
              --query 'Environments[0].Status' --output text)"
            echo "HEALTH=$HEALTH  STATUS=$STATUS"
            if [[ "$STATUS" == "Ready" && "$HEALTH" == "Green" ]]; then
              echo "✅ Environnement prêt."
              exit 0
            fi
            sleep 20
          done
          echo "❌ Timeout en attente de GREEN"; exit 1

      - name: Test de fumée (/health) — retries 15 min + fallback HTTP
        shell: bash
        run: |
          set -euo pipefail

          CNAME="$(aws elasticbeanstalk describe-environments \
            --region "${AWS_REGION}" \
            --environment-names "${ENV_NAME}" \
            --query 'Environments[0].CNAME' --output text)"

          if [[ -z "${CNAME:-}" || "${CNAME}" == "None" ]]; then
            echo "❌ CNAME vide, impossible de tester"
            exit 1
          fi

          URL="https://${CNAME}/health"
          echo "Test de santé sur: $URL"

          timeout=$((15*60))   # 15 minutes
          interval=10
          elapsed=0
          ok=0

          while (( elapsed < timeout )); do
            code="$(curl -sk -o /dev/null -w "%{http_code}" "$URL" || true)"
            echo "⏳ ${elapsed}s — HTTPS code: ${code}"
            if [[ "$code" == "200" ]]; then
              echo "✅ Health check OK (HTTPS)"
              ok=1
              break
            fi
            sleep "$interval"
            elapsed=$((elapsed + interval))
          done

          if [[ "$ok" -eq 0 ]]; then
            echo "❌ HTTPS toujours KO après ${timeout}s — détails CURL :"
            curl -skv "$URL" || true

            echo "⛑️  Fallback HTTP (au cas où le 443 n'est pas prêt) ..."
            URL_FALLBACK="http://${CNAME}/health"
            elapsed=0
            while (( elapsed < timeout )); do
              code="$(curl -s -o /dev/null -w "%{http_code}" "$URL_FALLBACK" || true)"
              echo "⏳ ${elapsed}s — HTTP code: ${code}"
              if [[ "$code" == "200" ]]; then
                echo "✅ Health check OK (HTTP fallback)"
                ok=1
                break
              fi
              sleep "$interval"
              elapsed=$((elapsed + interval))
            done
          fi

          if [[ "$ok" -ne 1 ]]; then
            echo "❌ Health check failed après ${timeout}s (HTTPS et HTTP)"
            exit 1
          fi
