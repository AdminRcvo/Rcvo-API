name: Déploiement STAGING via OIDC (Elastic Beanstalk)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: deploy-staging
  cancel-in-progress: true

env:
  AWS_REGION: eu-west-3
  APP_NAME: Rcvo-backend
  ENV_NAME: Rcvo-Backend-staging

jobs:
  deployer:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::409818814260:role/GithubOIDCRcvoDeploy
          aws-region: ${{ env.AWS_REGION }}

      - name: Vérifier l’identité AWS
        run: aws sts get-caller-identity

      - name: Installer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Installer dépendances (lockfile si présent)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Build (facultatif)
        run: npm run build --if-present

      # --- Packaging & upload EB ---
      - name: Créer l’archive à déployer
        id: pack
        shell: bash
        run: |
          set -euo pipefail
          TS="$(date +%Y%m%d_%H%M%S)"
          SHA="${GITHUB_SHA::7}"
          ZIP="app-${SHA}-${TS}.zip"
          echo "zip=$ZIP" >> "$GITHUB_OUTPUT"
          # Exclure .git, node_modules et l'archive elle-même
          zip -r "$ZIP" . -x ".git/*" "node_modules/*" "$ZIP"

      - name: Déterminer le bucket EB (CreateStorageLocation idempotent)
        id: bucket
        shell: bash
        run: |
          set -euo pipefail
          BUCKET="$(aws elasticbeanstalk create-storage-location --query S3Bucket --output text)"
          echo "bucket=$BUCKET" >> "$GITHUB_OUTPUT"

      - name: Upload vers S3
        shell: bash
        run: |
          set -euo pipefail
          aws s3 cp "${{ steps.pack.outputs.zip }}" "s3://${{ steps.bucket.outputs.bucket }}/${{ steps.pack.outputs.zip }}"

      - name: Créer/Enregistrer la version d’appli (idempotent)
        id: appver
        shell: bash
        run: |
          set -euo pipefail
          LABEL="${{ steps.pack.outputs.zip }}"
          aws elasticbeanstalk create-application-version \
            --application-name "${APP_NAME}" \
            --version-label "$LABEL" \
            --source-bundle S3Bucket="${{ steps.bucket.outputs.bucket }}",S3Key="${{ steps.pack.outputs.zip }}" \
          || echo "Version déjà existante"
          echo "label=$LABEL" >> "$GITHUB_OUTPUT"

      # --- ATTENTE AVANT DEPLOIEMENT ---
      - name: Attendre READY/GREEN (pré-déploiement)
        shell: bash
        run: |
          set -euo pipefail
          LIMIT=$((20*60))  # 20 min max
          STEP=10
          ELAPSED=0
          echo "⏳ Attente que ${ENV_NAME} soit READY/GREEN AVANT update-environment…"

          while :; do
            STATUS=$(aws elasticbeanstalk describe-environments \
              --environment-names "${ENV_NAME}" \
              --query "Environments[0].Status" --output text)
            HEALTH=$(aws elasticbeanstalk describe-environments \
              --environment-names "${ENV_NAME}" \
              --query "Environments[0].Health" --output text)
            echo "Etat: $STATUS / Santé: $HEALTH"

            if [ "$STATUS" = "Ready" ] && [ "$HEALTH" = "Green" ]; then
              echo "✅ Environnement prêt (pré-déploiement)."
              break
            fi

            if [ $ELAPSED -ge $LIMIT ]; then
              echo "❌ Timeout (pré-déploiement). Derniers évènements EB :"
              aws elasticbeanstalk describe-events \
                --region "${AWS_REGION}" \
                --environment-name "${ENV_NAME}" \
                --start-time "$(date -u -d '30 minutes ago' +%Y-%m-%dT%H:%M:%SZ)" \
                --max-records 200 \
                --query 'Events[].{Time:EventDate,Sev:Severity,Msg:Message}' \
                --output table || true
              exit 1
            fi

            sleep $STEP
            ELAPSED=$((ELAPSED+STEP))
          done

      # --- DEPLOIEMENT ---
      - name: Déployer sur l’environnement (update-environment)
        shell: bash
        run: |
          set -euo pipefail
          aws elasticbeanstalk update-environment \
            --environment-name "${ENV_NAME}" \
            --version-label "${{ steps.appver.outputs.label }}"

      # --- ATTENTE APRES DEPLOIEMENT ---
      - name: Attendre READY/GREEN (post-déploiement)
        shell: bash
        run: |
          set -euo pipefail
          LIMIT=$((30*60))  # 30 min max
          STEP=10
          ELAPSED=0
          echo "⏳ Attente que ${ENV_NAME} retourne à READY/GREEN APRES update-environment…"

          while :; do
            # Demande groupée, puis parsing dans le bon ordre (Health puis Status)
            OUT="$(aws elasticbeanstalk describe-environments \
              --environment-names "${ENV_NAME}" \
              --query 'Environments[0].[Health,Status]' --output text)"
            HEALTH=$(echo "$OUT" | awk '{print $1}')
            STATUS=$(echo "$OUT" | awk '{print $2}')
            echo "Etat: $STATUS / Santé: $HEALTH"

            if [ "$STATUS" = "Ready" ] && [ "$HEALTH" = "Green" ]; then
              echo "✅ Environnement prêt (post-déploiement)."
              break
            fi

            if [ $ELAPSED -ge $LIMIT ]; then
              echo "❌ Timeout (post-déploiement). Derniers évènements EB :"
              aws elasticbeanstalk describe-events \
                --region "${AWS_REGION}" \
                --environment-name "${ENV_NAME}" \
                --start-time "$(date -u -d '30 minutes ago' +%Y-%m-%dT%H:%M:%SZ)" \
                --max-records 200 \
                --query 'Events[].{Time:EventDate,Sev:Severity,Msg:Message}' \
                --output table || true
              exit 1
            fi

            sleep $STEP
            ELAPSED=$((ELAPSED+STEP))
          done

      # --- SMOKE TEST ---
      - name: Test de fumée (/health) avec retries et fallback
        shell: bash
        run: |
          set -euo pipefail
          CNAME="$(aws elasticbeanstalk describe-environments \
            --environment-names "${ENV_NAME}" \
            --query 'Environments[0].CNAME' --output text)"
          echo "CNAME: $CNAME"

          URLS=("https://${CNAME}/health" "http://${CNAME}/health")
          ATTEMPTS=20

          for URL in "${URLS[@]}"; do
            echo "🔎 Test: $URL"
            for i in $(seq 1 $ATTEMPTS); do
              code=$(curl -sk -o /dev/null -w "%{http_code}" "$URL" || true)
              echo "Tentative $i/$ATTEMPTS -> HTTP $code"
              if [ "$code" = "200" ]; then
                echo "✅ Smoke test OK ($URL)"
                exit 0
              fi
              sleep $((i<10 ? 3 : 6))
            done
          done

          echo "❌ Smoke test KO. Derniers évènements EB :"
          aws elasticbeanstalk describe-events \
            --region "${AWS_REGION}" \
            --environment-name "${ENV_NAME}" \
            --start-time "$(date -u -d '30 minutes ago' +%Y-%m-%dT%H:%M:%SZ)" \
            --max-records 200 \
            --query 'Events[].{Time:EventDate,Sev:Severity,Msg:Message}' \
            --output table || true
          exit 1
