name: D√©ploiement STAGING via OIDC (Elastic Beanstalk)

on:
  push:
    branches: [ main ]         # adapte si besoin
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

# √âvite les d√©ploiements concurrents qui se marchent dessus
concurrency:
  group: eb-staging-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: eu-west-3
  APP_NAME: Rcvo-backend
  ENV_NAME: Rcvo-Backend-staging

jobs:
  deployer:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::409818814260:role/GithubOIDCRcvoDeploy
          aws-region: ${{ env.AWS_REGION }}

      - name: V√©rifier l‚Äôidentit√© AWS
        run: aws sts get-caller-identity --region "${AWS_REGION}"

      - name: Installer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Installer d√©pendances (lockfile si pr√©sent)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Build (facultatif)
        run: npm run build --if-present

      - name: Pack ZIP √† d√©ployer
        id: pack
        shell: bash
        run: |
          set -euo pipefail
          TS="$(date +%Y%m%d_%H%M%S)"
          SHA="${GITHUB_SHA::7}"
          ZIP="app-${SHA}-${TS}.zip"
          echo "zip=$ZIP" >> "$GITHUB_OUTPUT"
          # Exclure dossier git, node_modules et l‚Äôarchive elle-m√™me
          zip -r "$ZIP" . -x ".git/*" "node_modules/*" "$ZIP"

      - name: D√©terminer le bucket EB (CreateStorageLocation idempotent)
        id: bucket
        shell: bash
        run: |
          set -euo pipefail
          BUCKET="$(aws elasticbeanstalk create-storage-location \
            --region "${AWS_REGION}" \
            --query S3Bucket --output text)"
          echo "bucket=$BUCKET" >> "$GITHUB_OUTPUT"

      - name: Upload vers S3
        run: |
          aws s3 cp "./${{ steps.pack.outputs.zip }}" \
            "s3://${{ steps.bucket.outputs.bucket }}/${{ steps.pack.outputs.zip }}" \
            --region "${AWS_REGION}"

      - name: Cr√©er/enregistrer la version d‚Äôappli (idempotent)
        id: appver
        shell: bash
        run: |
          set -euo pipefail
          LABEL="${{ steps.pack.outputs.zip }}"
          aws elasticbeanstalk create-application-version \
            --region "${AWS_REGION}" \
            --application-name "${APP_NAME}" \
            --version-label "$LABEL" \
            --source-bundle S3Bucket="${{ steps.bucket.outputs.bucket }}",S3Key="${{ steps.pack.outputs.zip }}" \
          || echo "Version d√©j√† existante, on continue."
          echo "label=$LABEL" >> "$GITHUB_OUTPUT"

      # S'assurer que l'env est bien 'Ready/Green' AVANT update
      - name: Attendre READY/GREEN (pr√©-d√©ploiement)
        shell: bash
        run: |
          set -euo pipefail
          END=$((SECONDS + 10*60))
          echo "‚è≥ Pr√©-d√©ploiement : on attend ${ENV_NAME} en Ready/Green‚Ä¶"
          while (( SECONDS < END )); do
            read HEALTH STATUS <<<"$(aws elasticbeanstalk describe-environments \
              --region "${AWS_REGION}" \
              --environment-names "${ENV_NAME}" \
              --query 'Environments[0].[Health,Status]' --output text)"
            echo "$(date -u '+%H:%M:%S') HEALTH=${HEALTH} STATUS=${STATUS}"
            if [[ "$STATUS" == "Ready" && "$HEALTH" == "Green" ]]; then
              echo "‚úÖ Environnement pr√™t."
              exit 0
            fi
            sleep 10
          done
          echo "‚ùå ${ENV_NAME} pas pr√™t apr√®s ~10 min"
          exit 1

      - name: D√©ployer sur l‚Äôenvironnement (update-environment)
        shell: bash
        run: |
          set -euo pipefail
          echo "üöÄ Mise √† jour ${ENV_NAME} vers label: ${{ steps.appver.outputs.label }}"
          aws elasticbeanstalk update-environment \
            --region "${AWS_REGION}" \
            --environment-name "${ENV_NAME}" \
            --version-label "${{ steps.appver.outputs.label }}"

      # ********* C‚ÄôEST ICI QU‚ÄôON ALLONGE LE TIMEOUT GITHUB *********
      - name: Attendre que l‚Äôenvironnement soit GREEN (post-d√©ploiement)
        timeout-minutes: 90
        shell: bash
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          ENV_NAME:   ${{ env.ENV_NAME }}
        run: |
          set -euo pipefail
          END=$((SECONDS + 90*60))
          echo "‚è≥ Post-d√©ploiement : on attend le retour en Ready/Green (timeout 90 min)‚Ä¶"
          while (( SECONDS < END )); do
            # AWS renvoie "Green<TAB>Ready" => Health puis Status
            read HEALTH STATUS <<<"$(aws elasticbeanstalk describe-environments \
              --region "${AWS_REGION}" \
              --environment-names "${ENV_NAME}" \
              --query 'Environments[0].[Health,Status]' --output text)"
            echo "$(date -u '+%H:%M:%S') HEALTH=${HEALTH} STATUS=${STATUS}"
            if [[ "$STATUS" == "Ready" && "$HEALTH" == "Green" ]]; then
              echo "‚úÖ Environnement pr√™t apr√®s update."
              exit 0
            fi
            sleep 10
          done

          echo "‚ùå Timeout  post-d√©ploiement (Ready/Green non atteint)."
          echo "üìã Derniers √©v√®nements Elastic Beanstalk (30 min) :"
          aws elasticbeanstalk describe-events \
            --region "${AWS_REGION}" \
            --environment-name "${ENV_NAME}" \
            --start-time "$(date -u -d '30 minutes ago' +%Y-%m-%dT%H:%M:%SZ)" \
            --max-records 200 \
            --query 'Events[].{Time:EventDate,Sev:Severity,Msg:Message}' \
            --output table || true
          exit 1

      - name: Test de fum√©e (/health) avec retries + fallback HTTP
        shell: bash
        run: |
          set -euo pipefail
          CNAME="$(aws elasticbeanstalk describe-environments \
            --region "${AWS_REGION}" \
            --environment-names "${ENV_NAME}" \
            --query 'Environments[0].CNAME' --output text)"
          if [[ -z "$CNAME" || "$CNAME" == "None" ]]; then
            echo "‚ùå CNAME introuvable"; exit 1
          fi

          URLS=("https://${CNAME}/health" "http://${CNAME}/health")
          echo "üîé Smoke test sur: ${URLS[*]}"

          ok="false"
          for url in "${URLS[@]}"; do
            for i in {1..30}; do
              code=$(curl -sk -o /dev/null -w "%{http_code}" "$url" || true)
              echo "Tentative $i ‚Üí $url ‚Üí $code"
              if [[ "$code" == "200" ]]; then
                ok="true"
                break
              fi
              sleep $((i<10 ? 3 : (i<20 ? 6 : 10)))
            done
            [[ "$ok" == "true" ]] && break
          done

          if [[ "$ok" != "true" ]]; then
            echo "‚ùå Smoke test KO. Dump des √©v√®nements (15 min) :"
            aws elasticbeanstalk describe-events \
              --region "${AWS_REGION}" \
              --environment-name "${ENV_NAME}" \
              --start-time "$(date -u -d '15 minutes ago' +%Y-%m-%dT%H:%M:%SZ)" \
              --max-records 200 \
              --query 'Events[].{Time:EventDate,Sev:Severity,Msg:Message}' \
              --output table || true
            exit 1
          fi

          echo "‚úÖ Smoke test OK"
