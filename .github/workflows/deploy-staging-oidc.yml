name: D√©ploiement STAGING (OIDC) - Rcvo Backend

on:
  push:
    branches: [ staging ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-west-3
  APP_NAME: Rcvo-backend                 # Nom EXACT de l'application Elastic Beanstalk
  ENV_NAME: Rcvo-Backend-staging         # Environnement STAGING EB

jobs:
  deployer:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::409818814260:role/GithubOIDCRcvoDeploy
          aws-region: ${{ env.AWS_REGION }}

      - name: V√©rifier l‚Äôidentit√© AWS
        run: aws sts get-caller-identity

      - name: Installer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Installer d√©pendances (lockfile si pr√©sent)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f package-lock.json ]; then
            npm ci
          else
            echo "‚ö†Ô∏è  package-lock.json absent ‚Üí npm install"
            npm install
          fi

      - name: Build (facultatif)
        run: npm run build --if-present

      - name: Cr√©er l‚Äôarchive √† d√©ployer
        id: pack
        shell: bash
        run: |
          set -euo pipefail
          TS="$(date +%Y%m%d_%H%M%S)"
          SHA="${GITHUB_SHA::7}"
          ZIP="app-${SHA}-${TS}.zip"
          echo "zip=$ZIP" >> "$GITHUB_OUTPUT"
          # Exclure .git, node_modules et l‚Äôarchive elle-m√™me
          zip -r "$ZIP" . -x ".git/*" "node_modules/*" "$ZIP"

      - name: D√©terminer le bucket EB (CreateStorageLocation idempotent)
        id: bucket
        shell: bash
        run: |
          set -euo pipefail
          BUCKET="$(aws elasticbeanstalk create-storage-location --region "${AWS_REGION}" --query S3Bucket --output text)"
          echo "bucket=$BUCKET" >> "$GITHUB_OUTPUT"

      - name: Upload vers S3
        run: |
          aws s3 cp "./${{ steps.pack.outputs.zip }}" "s3://${{ steps.bucket.outputs.bucket }}/${{ steps.pack.outputs.zip }}"

      - name: Cr√©er/Enregistrer la version d‚Äôappli
        id: appver
        shell: bash
        run: |
          set -euo pipefail
          LABEL="${{ steps.pack.outputs.zip }}"
          aws elasticbeanstalk create-application-version \
            --region "${AWS_REGION}" \
            --application-name "${APP_NAME}" \
            --version-label "$LABEL" \
            --source-bundle S3Bucket="${{ steps.bucket.outputs.bucket }}",S3Key="${{ steps.pack.outputs.zip }}" \
          || echo "‚ÑπÔ∏è  Version d√©j√† existante, on continue."
          echo "label=$LABEL" >> "$GITHUB_OUTPUT"

      # ---------- ATTENTE PRE-DEPLOIEMENT ----------
      - name: Attendre que l'environnement soit pr√™t (pr√©-d√©ploiement)
        shell: bash
        run: |
          set -euo pipefail
          ENV_NAME="${ENV_NAME}"
          TIMEOUT=$((15*60))   # 15 minutes max
          INTERVAL=10
          ELAPSED=0

          echo "‚è≥ Attente que l'environnement $ENV_NAME soit Ready & Green (pr√©-d√©ploiement)..."
          while [ $ELAPSED -lt $TIMEOUT ]; do
            OUT="$(aws elasticbeanstalk describe-environments \
              --region "${AWS_REGION}" \
              --environment-names "$ENV_NAME" \
              --query 'Environments[0].[Health,Status]' \
              --output text)"
            HEALTH=$(echo "$OUT" | awk '{print $1}')   # Green
            STATUS=$(echo "$OUT" | awk '{print $2}')   # Ready
            echo "STATUS=$STATUS  HEALTH=$HEALTH"

            if [[ "$STATUS" == "Ready" && "$HEALTH" == "Green" ]]; then
              echo "‚úÖ $ENV_NAME est pr√™t."
              break
            fi
            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
          done

          if [[ "$STATUS" != "Ready" || "$HEALTH" != "Green" ]]; then
            echo "‚ùå $ENV_NAME pas pr√™t apr√®s $((TIMEOUT/60)) min"
            exit 1
          fi

      - name: D√©ployer sur l‚Äôenvironnement
        run: |
          aws elasticbeanstalk update-environment \
            --region "${AWS_REGION}" \
            --environment-name "${ENV_NAME}" \
            --version-label "${{ steps.appver.outputs.label }}"

      # ---------- ATTENTE POST-DEPLOIEMENT ----------
      - name: Attendre que l‚Äôenvironnement soit GREEN
        shell: bash
        timeout-minutes: 20
        run: |
          set -euo pipefail
          ENV_NAME="${ENV_NAME}"
          TIMEOUT=$((20*60))  # 20 minutes
          INTERVAL=20
          ELAPSED=0

          echo "‚è≥ Attente post-d√©ploiement (Ready & Green)..."
          while [ $ELAPSED -lt $TIMEOUT ]; do
            OUT="$(aws elasticbeanstalk describe-environments \
              --region "${AWS_REGION}" \
              --environment-names "$ENV_NAME" \
              --query 'Environments[0].[Health,Status]' \
              --output text)"
            HEALTH=$(echo "$OUT" | awk '{print $1}')   # Green
            STATUS=$(echo "$OUT" | awk '{print $2}')   # Ready
            echo "STATUS=$STATUS  HEALTH=$HEALTH"

            if [[ "$STATUS" == "Ready" && "$HEALTH" == "Green" ]]; then
              echo "‚úÖ Environnement pr√™t."
              exit 0
            fi
            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
          done

          echo "‚ùå Timeout post-d√©ploiement"
          exit 1

      - name: Test de fum√©e (/health) avec retries
        shell: bash
        run: |
          set -euo pipefail
          CNAME="$(aws elasticbeanstalk describe-environments \
            --region "${AWS_REGION}" \
            --environment-names "${ENV_NAME}" \
            --query 'Environments[0].CNAME' --output text)"
          URL="https://${CNAME}/health"
          echo "üîé Test: $URL"

          timeout=$((15*60))  # 15 min max
          interval=10
          elapsed=0

          while (( elapsed < timeout )); do
            code=$(curl -sk -o /dev/null -w "%{http_code}" "$URL" || true)
            echo "Tentative $((elapsed/interval+1)) : code HTTP = $code"
            if [[ "$code" == "200" ]]; then
              echo "‚úÖ Health check OK"
              exit 0
            fi
            sleep $interval
            elapsed=$((elapsed + interval))
          done

          echo "‚ùå Health check KO apr√®s $timeout secondes"
          echo "‚Äî Diagnostic rapide ‚Äî"
          echo "CNAME: $CNAME"
          echo "Dernier code: $code"
          exit 1
