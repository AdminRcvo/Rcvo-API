name: Déploiement STAGING via OIDC (Elastic Beanstalk)

on:
  push:
    branches: [ main ]  # change à [ staging ] si besoin
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: deploy-staging
  cancel-in-progress: true

env:
  AWS_REGION: eu-west-3
  APP_NAME: Rcvo-backend
  ENV_NAME: Rcvo-Backend-staging
  ROLE_ARN: arn:aws:iam::409818814260:role/GithubOIDCRcvoDeploy

jobs:
  deployer:
    runs-on: ubuntu-latest
    # ← Large marge : le job PEUT durer jusqu’à 2h si besoin
    timeout-minutes: 120

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Vérifier l’identité AWS
        run: aws sts get-caller-identity

      - name: Installer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Installer dépendances (lockfile si présent)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Build (facultatif)
        run: npm run build --if-present

      - name: Pack ZIP
        id: pack
        shell: bash
        run: |
          set -euo pipefail
          TS="$(date +%Y%m%d_%H%M%S)"
          SHA="${GITHUB_SHA::7}"
          ZIP="app-${SHA}-${TS}.zip"
          echo "zip=$ZIP" >> "$GITHUB_OUTPUT"
          zip -r "$ZIP" . -x ".git/*" "node_modules/*" "$ZIP"

      - name: Bucket EB (idempotent)
        id: bucket
        run: |
          BUCKET="$(aws elasticbeanstalk create-storage-location --query S3Bucket --output text)"
          echo "bucket=$BUCKET" >> "$GITHUB_OUTPUT"

      - name: Upload vers S3
        run: |
          aws s3 cp "./${{ steps.pack.outputs.zip }}" "s3://${{ steps.bucket.outputs.bucket }}/${{ steps.pack.outputs.zip }}"

      - name: Créer / enregistrer la version d’appli (idempotent)
        id: appver
        shell: bash
        run: |
          set -euo pipefail
          LABEL="${{ steps.pack.outputs.zip }}"
          aws elasticbeanstalk create-application-version \
            --application-name "${APP_NAME}" \
            --version-label "$LABEL" \
            --source-bundle S3Bucket="${{ steps.bucket.outputs.bucket }}",S3Key="${{ steps.pack.outputs.zip }}" \
          || echo "Version déjà existante"
          echo "label=$LABEL" >> "$GITHUB_OUTPUT"

      - name: Attendre READY/GREEN (pré-déploiement)
        shell: bash
        run: |
          set -euo pipefail
          LIMIT=$((10*60))  # 10 minutes max avant l'update
          STEP=10
          ELAPSED=0
          while true; do
            OK=$(aws elasticbeanstalk describe-environments \
              --environment-names "${ENV_NAME}" \
              --query "length(Environments[?Status=='Ready' && Health=='Green'])" \
              --output text)
            echo "PRE ▶ Ready/Green = ${OK} | ${ELAPSED}s/${LIMIT}s"
            if [ "$OK" = "1" ]; then
              echo "✅ ${ENV_NAME} prêt pour déploiement."
              break
            fi
            [ $ELAPSED -ge $LIMIT ] && { echo "❌ Pré-déploiement: timeout"; exit 1; }
            sleep $STEP; ELAPSED=$((ELAPSED+STEP))
          done

      - name: Déployer sur l’environnement
        run: |
          aws elasticbeanstalk update-environment \
            --environment-name "${ENV_NAME}" \
            --version-label "${{ steps.appver.outputs.label }}"

      # ⚠️ PAS DE "timeout-minutes" ici : c'est ce qui te coupait à 15 min
      - name: Attendre que l’environnement soit GREEN
        shell: bash
        run: |
          set -euo pipefail
          LIMIT=$((30*60))  # 30 minutes max post-déploiement
          STEP=10
          ELAPSED=0
          while true; do
            OK=$(aws elasticbeanstalk describe-environments \
              --environment-names "${ENV_NAME}" \
              --query "length(Environments[?Status=='Ready' && Health=='Green'])" \
              --output text)
            # on parle toutes les 10s pour que le runner ne considère pas la step idle
            echo "POST ▶ Ready/Green = ${OK} | ${ELAPSED}s/${LIMIT}s"
            if [ "$OK" = "1" ]; then
              echo "✅ Déploiement terminé : ${ENV_NAME} Ready/Green."
              break
            fi
            if [ $ELAPSED -ge $LIMIT ]; then
              echo "❌ Timeout post-déploiement (30 min). Derniers événements :"
              aws elasticbeanstalk describe-events \
                --environment-name "${ENV_NAME}" \
                --start-time "$(date -u -d '30 minutes ago' +%Y-%m-%dT%H:%M:%SZ)" \
                --query 'Events[].{Time:EventDate,Sev:Severity,Msg:Message}' \
                --output table || true
              aws elasticbeanstalk request-environment-info \
                --environment-name "${ENV_NAME}" --info-type tail || true
              sleep 20
              aws elasticbeanstalk retrieve-environment-info \
                --environment-name "${ENV_NAME}" --info-type tail \
                --query 'EnvironmentInfo[].{When:SampleTimestamp,URL:Message}' \
                --output table || true
              exit 1
            fi
            sleep $STEP; ELAPSED=$((ELAPSED+STEP))
          done

      - name: Test de fumée (/health)
        shell: bash
        run: |
          set -euo pipefail
          CNAME="$(aws elasticbeanstalk describe-environments \
            --environment-names "${ENV_NAME}" \
            --query 'Environments[0].CNAME' --output text)"
          URL_HTTPS="https://${CNAME}/health"
          URL_HTTP="http://${CNAME}/health"
          echo "Smoke test: ${URL_HTTPS}"
          ok=0
          for i in $(seq 1 20); do
            code=$(curl -sk -o /dev/null -w "%{http_code}" "${URL_HTTPS}" || true)
            echo "Try ${i} HTTPS => ${code}"
            if [ "${code}" = "200" ]; then ok=1; break; fi
            sleep 5
          done
          if [ "${ok}" != "1" ]; then
            echo "Fallback HTTP…"
            for i in $(seq 1 20); do
              code=$(curl -s -o /dev/null -w "%{http_code}" "${URL_HTTP}" || true)
              echo "Try ${i} HTTP => ${code}"
              if [ "${code}" = "200" ]; then ok=1; break; fi
              sleep 5
            done
          fi
          [ "${ok}" = "1" ] && echo "✅ Smoke test OK." || { echo "❌ Smoke test KO"; exit 1; }
