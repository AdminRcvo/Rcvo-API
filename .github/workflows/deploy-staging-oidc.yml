name: Déploiement STAGING via OIDC (Elastic Beanstalk)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: eb-staging
  cancel-in-progress: false

env:
  AWS_REGION: eu-west-3
  ROLE_ARN: arn:aws:iam::409818814260:role/GithubOIDCRcvoDeploy
  APP_NAME: Rcvo-backend
  ENV_NAME: Rcvo-Backend-staging
  HEALTH_PATH: /health

jobs:
  deployer:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Vérifier identité AWS
        run: aws sts get-caller-identity

      - name: Installer outils (jq, zip, curl)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq zip curl

      - name: Vérifier que l’environnement EB existe et n’est pas en fin de vie
        shell: bash
        run: |
          set -euo pipefail
          OUT="$(aws elasticbeanstalk describe-environments \
            --application-name "${APP_NAME}" \
            --environment-names "${ENV_NAME}" \
            --query 'Environments[0].{Status:Status,Health:Health}' --output json || true)"
          if [[ -z "$OUT" || "$OUT" == "null" ]]; then
            echo "❌ L'environnement '${ENV_NAME}' n'existe pas."
            echo "Crée-le d'abord (console AWS ou CLI), puis relance le workflow."
            exit 1
          fi
          STATUS="$(echo "$OUT" | jq -r '.Status')"
          HEALTH="$(echo "$OUT" | jq -r '.Health')"
          echo "Etat actuel: STATUS=${STATUS} | HEALTH=${HEALTH}"

          if [[ "$STATUS" == "Terminated" || "$STATUS" == "Terminating" ]]; then
            echo "❌ L'environnement est en état '${STATUS}'. Attends qu'il soit 'Ready' ou recrée-le avant de déployer."
            exit 1
          fi

      - name: Installer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Installer dépendances
        shell: bash
        run: |
          set -euo pipefail
          if [[ -f package-lock.json ]]; then
            npm ci
          else
            npm install
          fi

      - name: Build (si script présent)
        run: npm run build --if-present

      - name: Pack ZIP à déployer
        id: pack
        shell: bash
        run: |
          set -euo pipefail
          TS="$(date +%Y%m%d_%H%M%S)"
          SHA="${GITHUB_SHA::7}"
          ZIP="app-${SHA}-${TS}.zip"
          echo "zip=$ZIP" >> "$GITHUB_OUTPUT"
          # Exclusions usuelles
          zip -r "$ZIP" . -x ".git/*" "node_modules/*" ".github/*"

      - name: Déterminer le bucket EB (CreateStorageLocation idempotent)
        id: bucket
        run: |
          BUCKET="$(aws elasticbeanstalk create-storage-location --query S3Bucket --output text)"
          echo "bucket=$BUCKET" >> "$GITHUB_OUTPUT"
          echo "Bucket EB: ${BUCKET}"

      - name: Upload vers S3
        run: |
          aws s3 cp "${{ steps.pack.outputs.zip }}" "s3://${{ steps.bucket.outputs.bucket }}/${{ steps.pack.outputs.zip }}"

      - name: Créer/Enregistrer la version d’appli
        id: appver
        shell: bash
        run: |
          set -euo pipefail
          LABEL="${{ steps.pack.outputs.zip }}"
          aws elasticbeanstalk create-application-version \
            --application-name "${APP_NAME}" \
            --version-label "$LABEL" \
            --source-bundle S3Bucket="${{ steps.bucket.outputs.bucket }}",S3Key="${{ steps.pack.outputs.zip }}" \
          || echo "Version déjà existante"
          echo "label=$LABEL" >> "$GITHUB_OUTPUT"
          echo "Version: $LABEL"

      - name: Attendre READY/GREEN (pré-déploiement)
        shell: bash
        run: |
          set -euo pipefail
          max=120   # ~20 min
          for ((i=1;i<=max;i++)); do
            OUT="$(aws elasticbeanstalk describe-environments \
              --application-name "${APP_NAME}" \
              --environment-names "${ENV_NAME}" \
              --query 'Environments[0].{Status:Status,Health:Health}' --output json)"
            STATUS="$(echo "$OUT" | jq -r '.Status')"
            HEALTH="$(echo "$OUT" | jq -r '.Health')"
            echo "[$i/${max}] STATUS=${STATUS} | HEALTH=${HEALTH}"

            if [[ "$STATUS" == "Ready" && "$HEALTH" == "Green" ]]; then
              echo "✅ Pré-déploiement OK."
              break
            fi

            if [[ "$STATUS" == "Terminated" || "$STATUS" == "Terminating" ]]; then
              echo "❌ L'environnement est '${STATUS}'. Abandon."
              exit 1
            fi

            sleep 10
          done

      - name: Déployer (update-environment)
        run: |
          aws elasticbeanstalk update-environment \
            --environment-name "${ENV_NAME}" \
            --version-label "${{ steps.appver.outputs.label }}"

      - name: Attendre READY/GREEN (post-déploiement)
        shell: bash
        run: |
          set -euo pipefail
          max=180   # ~30 min
          for ((i=1;i<=max;i++)); do
            OUT="$(aws elasticbeanstalk describe-environments \
              --application-name "${APP_NAME}" \
              --environment-names "${ENV_NAME}" \
              --query 'Environments[0].{Status:Status,Health:Health}' --output json)"
            STATUS="$(echo "$OUT" | jq -r '.Status')"
            HEALTH="$(echo "$OUT" | jq -r '.Health')"
            echo "[$i/${max}] STATUS=${STATUS} | HEALTH=${HEALTH}"

            if [[ "$STATUS" == "Ready" && "$HEALTH" == "Green" ]]; then
              echo "✅ Déploiement OK."
              exit 0
            fi

            if (( i % 30 == 0 )); then
              echo "— Derniers events EB (aperçu) —"
              aws elasticbeanstalk describe-events \
                --environment-name "${ENV_NAME}" \
                --start-time "$(date -u -d '30 minutes ago' +%Y-%m-%dT%H:%M:%SZ)" \
                --max-records 20 \
                --query 'Events[].{Time:EventDate,Sev:Severity,Msg:Message}' \
                --output table || true
            fi

            sleep 10
          done

          echo "❌ Timeout logique (post-déploiement)."
          exit 1

      - name: Test de fumée (/health) avec retries et fallback
        if: ${{ success() }}
        shell: bash
        run: |
          set -euo pipefail
          CNAME="$(aws elasticbeanstalk describe-environments \
            --environment-names "${ENV_NAME}" \
            --query 'Environments[0].CNAME' --output text)"
          echo "CNAME=${CNAME}"

          try_url () {
            local url="$1"
            echo "Test ${url}"
            for i in {1..30}; do
              code="$(curl -sk -o /dev/null -w '%{http_code}' "$url" || true)"
              echo "  tentative $i -> HTTP $code"
              if [[ "$code" == "200" ]]; then
                echo "✅ OK $url"
                return 0
              fi
              sleep 5
            done
            return 1
          }

          try_url "https://${CNAME}${HEALTH_PATH}" || try_url "http://${CNAME}${HEALTH_PATH}"

      # ——— DIAGNOSTICS TOUJOURS ———
      - name: (Diag) Derniers événements EB (30m)
        if: ${{ always() }}
        continue-on-error: true
        run: |
          aws elasticbeanstalk describe-events \
            --environment-name "${ENV_NAME}" \
            --start-time "$(date -u -d '30 minutes ago' +%Y-%m-%dT%H:%M:%SZ)" \
            --max-records 50 \
            --query 'Events[].{Time:EventDate,Sev:Severity,Msg:Message}' \
            --output table

      - name: (Diag) Tail logs EB
        if: ${{ failure() }}
        continue-on-error: true
        run: |
          aws elasticbeanstalk request-environment-info \
            --environment-name "${ENV_NAME}" --info-type tail || true
          sleep 20
          aws elasticbeanstalk retrieve-environment-info \
            --environment-name "${ENV_NAME}" --info-type tail \
            --query 'EnvironmentInfo[].{When:SampleTimestamp,URL:Message}' --output table || true
