name: D√©ploiement STAGING via OIDC (EB) v2

on:
  push:
    branches: [ main ]     # mets [staging] si c'est ta branche de staging
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: deploy-staging
  cancel-in-progress: true

env:
  AWS_REGION: eu-west-3
  APP_NAME: Rcvo-backend
  ENV_NAME: Rcvo-Backend-staging
  ROLE_ARN: arn:aws:iam::409818814260:role/GithubOIDCRcvoDeploy

jobs:
  deployer:
    runs-on: ubuntu-latest
    # marge large au niveau JOB (pas au niveau step)
    timeout-minutes: 120

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: V√©rifier l‚Äôidentit√© AWS
        run: aws sts get-caller-identity

      - name: Installer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Installer d√©pendances (lockfile si pr√©sent)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f package-lock.json ]; then npm ci; else npm install; fi

      - name: Build (facultatif)
        run: npm run build --if-present

      - name: Pack ZIP
        id: pack
        shell: bash
        run: |
          set -euo pipefail
          TS="$(date +%Y%m%d_%H%M%S)"
          SHA="${GITHUB_SHA::7}"
          ZIP="app-${SHA}-${TS}.zip"
          echo "zip=$ZIP" >> "$GITHUB_OUTPUT"
          zip -r "$ZIP" . -x ".git/*" "node_modules/*" "$ZIP"

      - name: Bucket EB (idempotent)
        id: bucket
        run: |
          BUCKET="$(aws elasticbeanstalk create-storage-location --query S3Bucket --output text)"
          echo "bucket=$BUCKET" >> "$GITHUB_OUTPUT"

      - name: Upload vers S3
        run: |
          aws s3 cp "./${{ steps.pack.outputs.zip }}" "s3://${{ steps.bucket.outputs.bucket }}/${{ steps.pack.outputs.zip }}"

      - name: Cr√©er / enregistrer la version d‚Äôappli (idempotent)
        id: appver
        shell: bash
        run: |
          set -euo pipefail
          LABEL="${{ steps.pack.outputs.zip }}"
          aws elasticbeanstalk create-application-version \
            --application-name "${APP_NAME}" \
            --version-label "$LABEL" \
            --source-bundle S3Bucket="${{ steps.bucket.outputs.bucket }}",S3Key="${{ steps.pack.outputs.zip }}" \
          || echo "Version d√©j√† existante"
          echo "label=$LABEL" >> "$GITHUB_OUTPUT"

      - name: Attendre READY/GREEN avant d√©ploiement
        shell: bash
        run: |
          set -euo pipefail
          LIMIT=$((10*60))  # 10 min max
          STEP=10
          ELAPSED=0
          while :; do
            OK=$(aws elasticbeanstalk describe-environments \
              --environment-names "${ENV_NAME}" \
              --query "length(Environments[?Status=='Ready' && Health=='Green'])" \
              --output text)
            echo "PRE ‚ñ∂ Ready/Green=${OK} | ${ELAPSED}s/${LIMIT}s"
            [ "$OK" = "1" ] && { echo "‚úÖ ${ENV_NAME} pr√™t."; break; }
            [ $ELAPSED -ge $LIMIT ] && { echo "‚ùå Timeout pr√©-d√©ploiement"; exit 1; }
            sleep $STEP; ELAPSED=$((ELAPSED+STEP))
          done

      - name: D√©ployer sur l‚Äôenvironnement
        run: |
          aws elasticbeanstalk update-environment \
            --environment-name "${ENV_NAME}" \
            --version-label "${{ steps.appver.outputs.label }}"

      # ‚ö†Ô∏è AUCUN `timeout-minutes` ici. La step peut d√©passer 15 min.
      - name: Attendre READY/GREEN apr√®s d√©ploiement
        shell: bash
        run: |
          set -euo pipefail
          LIMIT=$((30*60))  # 30 min max
          STEP=10
          ELAPSED=0
          while :; do
            OK=$(aws elasticbeanstalk describe-environments \
              --environment-names "${ENV_NAME}" \
              --query "length(Environments[?Status=='Ready' && Health=='Green'])" \
              --output text)
            echo "POST ‚ñ∂ Ready/Green=${OK} | ${ELAPSED}s/${LIMIT}s"
            if [ "$OK" = "1" ]; then
              echo "‚úÖ D√©ploiement termin√© (Ready/Green)."
              break
            fi
            if [ $ELAPSED -ge $LIMIT ]; then
              echo "‚ùå Timeout post-d√©ploiement ‚Üí derniers √©v√©nements EB :"
              aws elasticbeanstalk describe-events \
                --environment-name "${ENV_NAME}" \
                --start-time "$(date -u -d '30 minutes ago' +%Y-%m-%dT%H:%M:%SZ)" \
                --query 'Events[].{Time:EventDate,Sev:Severity,Msg:Message}' \
                --output table || true
              aws elasticbeanstalk request-environment-info \
                --environment-name "${ENV_NAME}" --info-type tail || true
              sleep 20
              aws elasticbeanstalk retrieve-environment-info \
                --environment-name "${ENV_NAME}" --info-type tail \
                --query 'EnvironmentInfo[].{When:SampleTimestamp,URL:Message}' \
                --output table || true
              exit 1
            fi
            sleep $STEP; ELAPSED=$((ELAPSED+STEP))
          done

      - name: Smoke test /health avec retries et fallback HTTP
        shell: bash
        run: |
          set -euo pipefail
          CNAME="$(aws elasticbeanstalk describe-environments \
            --environment-names "${ENV_NAME}" \
            --query 'Environments[0].CNAME' --output text)"
          URL_HTTPS="https://${CNAME}/health"
          URL_HTTP="http://${CNAME}/health"
          echo "üîé Test: ${URL_HTTPS}"
          ok=0
          for i in $(seq 1 20); do
            code=$(curl -sk -o /dev/null -w "%{http_code}" "${URL_HTTPS}" || true)
            echo "Try ${i} HTTPS ‚áí ${code}"
            [ "${code}" = "200" ] && { ok=1; break; }
            sleep 5
          done
          if [ "${ok}" != "1" ]; then
            echo "‚Ü™Ô∏è Fallback HTTP‚Ä¶"
            for i in $(seq 1 20); do
              code=$(curl -s -o /dev/null -w "%{http_code}" "${URL_HTTP}" || true)
              echo "Try ${i} HTTP ‚áí ${code}"
              [ "${code}" = "200" ] && { ok=1; break; }
              sleep 5
            done
          fi
          [ "${ok}" = "1" ] && echo "‚úÖ Smoke test OK" || { echo "‚ùå Smoke test KO"; exit 1; }
