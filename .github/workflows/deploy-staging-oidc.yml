name: Déploiement STAGING (OIDC - Elastic Beanstalk)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: eb-staging
  cancel-in-progress: false

env:
  AWS_REGION: eu-west-3
  APP_NAME: Rcvo-backend
  ENV_NAME: Rcvo-Backend-staging

jobs:
  deployer:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::409818814260:role/GithubOIDCRcvoDeploy
          aws-region: ${{ env.AWS_REGION }}

      - name: Vérifier l’identité AWS
        run: aws sts get-caller-identity

      - name: Installer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Installer dépendances (lockfile si présent)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f package-lock.json ]; then npm ci; else npm install; fi

      - name: Build (facultatif)
        run: npm run build --if-present

      - name: Créer l’archive à déployer
        id: pack
        shell: bash
        run: |
          set -euo pipefail
          TS="$(date +%Y%m%d_%H%M%S)"
          SHA="${GITHUB_SHA::7}"
          ZIP="app-${SHA}-${TS}.zip"
          echo "zip=$ZIP" >> "$GITHUB_OUTPUT"
          zip -r "$ZIP" . -x ".git/*" "node_modules/*"

      - name: Déterminer le bucket EB (idempotent)
        id: bucket
        run: |
          BUCKET="$(aws elasticbeanstalk create-storage-location --query S3Bucket --output text)"
          echo "bucket=$BUCKET" >> "$GITHUB_OUTPUT"

      - name: Upload vers S3
        run: |
          aws s3 cp "${{ steps.pack.outputs.zip }}" "s3://${{ steps.bucket.outputs.bucket }}/${{ steps.pack.outputs.zip }}"

      - name: Créer/Enregistrer la version d’appli
        id: appver
        run: |
          LABEL="${{ steps.pack.outputs.zip }}"
          aws elasticbeanstalk create-application-version \
            --application-name "${APP_NAME}" \
            --version-label "$LABEL" \
            --source-bundle S3Bucket="${{ steps.bucket.outputs.bucket }}",S3Key="${{ steps.pack.outputs.zip }}" \
          || echo "Version déjà existante"
          echo "label=$LABEL" >> "$GITHUB_OUTPUT"

      # ===== Attente PRE-déploiement =====
      - name: Attendre READY/GREEN (pré-déploiement)
        shell: bash
        run: |
          set -euo pipefail
          echo "⏳ Attente que ${ENV_NAME} soit READY/GREEN avant update…"
          # Boucle ~20 min (80 * 15s)
          for i in {1..80}; do
            STATUS="$(aws elasticbeanstalk describe-environments \
              --region "${AWS_REGION}" \
              --environment-names "${ENV_NAME}" \
              --query 'Environments[0].Status' --output text || echo none)"
            HEALTH="$(aws elasticbeanstalk describe-environments \
              --region "${AWS_REGION}" \
              --environment-names "${ENV_NAME}" \
              --query 'Environments[0].Health' --output text || echo none)"
            echo "STATUS=$STATUS  HEALTH=$HEALTH"
            if [[ "$STATUS" == "Ready" && "$HEALTH" == "Green" ]]; then
              echo "✅ ${ENV_NAME} prêt (pré-déploiement)."; break; fi
            sleep 15
          done
          if [[ "$STATUS" != "Ready" || "$HEALTH" != "Green" ]]; then
            echo "❌ ${ENV_NAME} pas prêt après ~20 min (pré)."; exit 1; fi

      - name: Déployer sur l’environnement
        run: |
          aws elasticbeanstalk update-environment \
            --environment-name "${ENV_NAME}" \
            --version-label "${{ steps.appver.outputs.label }}"

      # ===== Attente POST-déploiement =====
      - name: Attendre READY/GREEN (post-déploiement)
        shell: bash
        run: |
          set -euo pipefail
          echo "⏳ Attente READY/GREEN après update…"
          for i in {1..100}; do  # ~25 min
            STATUS="$(aws elasticbeanstalk describe-environments \
              --region "${AWS_REGION}" \
              --environment-names "${ENV_NAME}" \
              --query 'Environments[0].Status' --output text || echo none)"
            HEALTH="$(aws elasticbeanstalk describe-environments \
              --region "${AWS_REGION}" \
              --environment-names "${ENV_NAME}" \
              --query 'Environments[0].Health' --output text || echo none)"
            echo "STATUS=$STATUS  HEALTH=$HEALTH"
            if [[ "$STATUS" == "Ready" && "$HEALTH" == "Green" ]]; then
              echo "✅ ${ENV_NAME} prêt (post-déploiement)."; exit 0; fi
            sleep 15
          done
          echo "❌ Timeout post-déploiement."
          echo "ℹ️ Derniers events EB :"
          aws elasticbeanstalk describe-events \
            --region "${AWS_REGION}" \
            --environment-name "${ENV_NAME}" \
            --start-time "$(date -u -d '30 minutes ago' +%Y-%m-%dT%H:%M:%SZ)" \
            --max-records 200 \
            --query 'Events[].{Time:EventDate,Sev:Severity,Msg:Message}' \
            --output table || true
          exit 1

      - name: Test de fumée (/health) HTTPS avec retries + fallback HTTP
        shell: bash
        run: |
          set -euo pipefail
          CNAME="$(aws elasticbeanstalk describe-environments \
            --region "${AWS_REGION}" \
            --environment-names "${ENV_NAME}" \
            --query 'Environments[0].CNAME' --output text)"
          URLS=("https://${CNAME}/health" "http://${CNAME}/health")
          ok=0
          for URL in "${URLS[@]}"; do
            echo "Probe: $URL"
            for i in {1..20}; do
              code=$(curl -sk -o /dev/null -w "%{http_code}" "$URL" || true)
              echo "Tentative $i -> HTTP $code"
              if [[ "$code" == "200" ]]; then ok=1; break; fi
              sleep 5
            done
            [[ "$ok" == "1" ]] && break
          done
          if [[ "$ok" != "1" ]]; then
            echo "❌ Healthcheck KO après retries."
            exit 1
          fi
          echo "✅ Healthcheck OK"
