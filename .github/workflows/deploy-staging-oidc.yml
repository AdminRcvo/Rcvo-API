name: Déployer le STAGING via OIDC

on:
  push:
    branches: [ main ]
    paths:
      - '**/*.js'
      - '**/*.json'
      - '.github/workflows/deploy-staging-oidc.yml'
  workflow_dispatch:

permissions:
  id-token: write   # indispensable pour OIDC
  contents: read

env:
  AWS_REGION: eu-west-3
  APP_NAME: Rcvo-backend
  ENV_NAME: Rcvo-Backend-staging
  ROLE_ARN: arn:aws:iam::409818814260:role/GithubOIDCRcvoDeploy

jobs:
  deployer:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.ROLE_ARN }}
          role-session-name: rcvo-stg-${{ github.run_id }}

      - name: Vérifier l’identité AWS
        run: aws sts get-caller-identity

      - name: Installer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Installer dépendances
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm install; fi

      - name: Build (facultatif)
        run: npm run build --if-present

      - name: Pack ZIP
        id: pack
        run: |
          TS=$(date +%Y%m%d_%H%M%S)
          SHA=${GITHUB_SHA::7}
          ZIP="app-${SHA}-${TS}.zip"
          echo "zip=$ZIP" >> "$GITHUB_OUTPUT"
          zip -r "$ZIP" . -x ".git/*" "node_modules/*"

      - name: Bucket EB (idempotent)
        id: bucket
        run: |
          B=$(aws elasticbeanstalk create-storage-location --query S3Bucket --output text)
          echo "bucket=$B" >> "$GITHUB_OUTPUT"

      - name: Upload vers S3
        run: aws s3 cp "${{ steps.pack.outputs.zip }}" "s3://${{ steps.bucket.outputs.bucket }}/${{ steps.pack.outputs.zip }}"

      - name: Create App Version (idempotent)
        id: appver
        run: |
          LABEL="${{ steps.pack.outputs.zip }}"
          aws elasticbeanstalk create-application-version \
            --application-name "${APP_NAME}" \
            --version-label "$LABEL" \
            --source-bundle S3Bucket="${{ steps.bucket.outputs.bucket }}",S3Key="${{ steps.pack.outputs.zip }}" \
          || echo "Version déjà existante"
          echo "label=$LABEL" >> "$GITHUB_OUTPUT"

      - name: Update Environment
        run: |
          aws elasticbeanstalk update-environment \
            --environment-name "${ENV_NAME}" \
            --version-label "${{ steps.appver.outputs.label }}"

      - name: Attendre READY/GREEN
        timeout-minutes: 15
        run: |
          for i in {1..45}; do
            OUT=$(aws elasticbeanstalk describe-environments \
              --environment-names "${ENV_NAME}" \
              --query 'Environments[0].[Status,Health]' --output text)
            echo "$OUT"
            STATUS=$(echo "$OUT" | awk '{print $1}')
            HEALTH=$(echo "$OUT" | awk '{print $2}')
            if [ "$STATUS" = "Ready" ] && [ "$HEALTH" = "Green" ]; then
              exit 0
            fi
            sleep 20
          done
          echo "Timeout en attente de GREEN"; exit 1

      - name: Smoke test /health
        run: |
          CNAME=$(aws elasticbeanstalk describe-environments \
            --environment-names "${ENV_NAME}" \
            --query 'Environments[0].CNAME' --output text)
          code=$(curl -s -o /dev/null -w "%{http_code}" "http://${CNAME}/health" || true)
          echo "HTTP: $code"
          if [ "$code" != "200" ]; then
            code=$(curl -sk -o /dev/null -w "%{http_code}" "https://${CNAME}/health" || true)
            echo "HTTPS: $code"
          fi
          test "$code" = "200"
