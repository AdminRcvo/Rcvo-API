name: Déploiement STAGING via OIDC (Elastic Beanstalk)

on:
  push:
    branches: [ staging ]
  workflow_dispatch:

concurrency:
  group: deploy-staging
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-west-3
  APP_NAME: Rcvo-backend
  ENV_NAME: Rcvo-Backend-staging
  ROLE_ARN: arn:aws:iam::409818814260:role/GithubOIDCRcvoDeploy

jobs:
  deployer:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Vérifier l’identité AWS
        run: aws sts get-caller-identity

      - name: Installer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Installer dépendances (lockfile si présent)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f package-lock.json ]; then npm ci; else npm install; fi

      - name: Build (facultatif)
        run: npm run build --if-present

      # ── Pack et upload de la version ─────────────────────────────────────────────
      - name: Pack ZIP
        id: pack
        shell: bash
        run: |
          set -euo pipefail
          TS="$(date +%Y%m%d_%H%M%S)"
          SHA="${GITHUB_SHA::7}"
          ZIP="app-${SHA}-${TS}.zip"
          echo "zip=$ZIP" >> "$GITHUB_OUTPUT"
          zip -r "$ZIP" . -x ".git/*" "node_modules/*" "$ZIP"

      - name: Bucket EB (idempotent)
        id: bucket
        shell: bash
        run: |
          set -euo pipefail
          BKT="$(aws elasticbeanstalk create-storage-location --query S3Bucket --output text)"
          echo "bucket=$BKT" >> "$GITHUB_OUTPUT"

      - name: Upload S3
        run: |
          aws s3 cp "${{ steps.pack.outputs.zip }}" \
            "s3://${{ steps.bucket.outputs.bucket }}/${{ steps.pack.outputs.zip }}"

      - name: Créer/Enregistrer la version EB (idempotent)
        id: appver
        shell: bash
        run: |
          set -euo pipefail
          LABEL="${{ steps.pack.outputs.zip }}"
          aws elasticbeanstalk create-application-version \
            --application-name "${APP_NAME}" \
            --version-label "$LABEL" \
            --source-bundle S3Bucket="${{ steps.bucket.outputs.bucket }}",S3Key="${{ steps.pack.outputs.zip }}" \
          || echo "Version déjà existante"
          echo "label=$LABEL" >> "$GITHUB_OUTPUT"

      # ── Avant update : vérifier que l'env est prêt ───────────────────────────────
      - name: Attendre READY/GREEN (pré-déploiement)
        shell: bash
        run: |
          set -euo pipefail
          for i in {1..60}; do  # ~10 min
            read -r HEALTH STATUS VERSION <<<"$(aws elasticbeanstalk describe-environments \
              --environment-names "${ENV_NAME}" \
              --query 'Environments[0].[Health,Status,VersionLabel]' --output text)"
            echo "PRE  Health=${HEALTH}  Status=${STATUS}  Version=${VERSION}"
            if [[ "$STATUS" == "Ready" && "$HEALTH" == "Green" ]]; then exit 0; fi
            sleep 10
          done
          echo "❌ ${ENV_NAME} non prêt (pré-déploiement)"; exit 1

      # ── Déploiement : on FORCE l'update ─────────────────────────────────────────
      - name: Déployer sur l’environnement (forcer update)
        shell: bash
        run: |
          set -euo pipefail
          TARGET="${{ steps.appver.outputs.label }}"
          echo "▶️ Mise à jour vers ${TARGET}"
          aws elasticbeanstalk update-environment \
            --environment-name "${ENV_NAME}" \
            --version-label "${TARGET}"

      # ── Après update : on attend la BONNE version + Green/Ready ─────────────────
      - name: Attendre READY/GREEN + bonne version (post-déploiement)
        shell: bash
        run: |
          set -euo pipefail
          TARGET="${{ steps.appver.outputs.label }}"
          for i in {1..75}; do  # ~25 min
            read -r HEALTH STATUS VERSION <<<"$(aws elasticbeanstalk describe-environments \
              --environment-names "${ENV_NAME}" \
              --query 'Environments[0].[Health,Status,VersionLabel]' --output text)"
            echo "POST Health=${HEALTH}  Status=${STATUS}  Version=${VERSION}"
            if [[ "$VERSION" == "$TARGET" && "$STATUS" == "Ready" && "$HEALTH" == "Green" ]]; then
              echo "✅ Déploiement appliqué : ${VERSION}"
              exit 0
            fi
            sleep 20
          done
          echo "❌ Timeout : version cible non appliquée ou état != Green/Ready."
          echo "---- Derniers événements EB ----"
          aws elasticbeanstalk describe-events \
            --environment-name "${ENV_NAME}" \
            --max-items 50 \
            --query 'Events[].{Time:EventDate,Message:Message,Severity:Severity}' --output table || true
          exit 1

      # ── Smoke test robuste (HTTPS puis fallback HTTP) ───────────────────────────
      - name: Test de fumée (/health)
        shell: bash
        run: |
          set -euo pipefail
          CNAME="$(aws elasticbeanstalk describe-environments \
            --environment-names "${ENV_NAME}" \
            --query 'Environments[0].CNAME' --output text)"
          URL_HTTPS="https://${CNAME}/health"
          URL_HTTP="http://${CNAME}/health"
          echo "Smoke test HTTPS: ${URL_HTTPS}"
          OK=0
          for i in {1..30}; do  # ~10 min
            code=$(curl -sk -o /dev/null -w "%{http_code}" "${URL_HTTPS}" || true)
            echo "Tentative $i - HTTPS -> $code"
            if [[ "$code" == "200" ]]; then OK=1; break; fi
            sleep 10
          done
          if [[ "$OK" -ne 1 ]]; then
            echo "⚠️ HTTPS pas OK, essai HTTP (fallback)"
            for i in {1..12}; do
              code=$(curl -s -o /dev/null -w "%{http_code}" "${URL_HTTP}" || true)
              echo "Tentative $i - HTTP -> $code"
              if [[ "$code" == "200" ]]; then OK=1; break; fi
              sleep 10
            done
          fi
          if [[ "$OK" -ne 1 ]]; then
            echo "---- Derniers événements EB ----"
            aws elasticbeanstalk describe-events \
              --environment-name "${ENV_NAME}" \
              --max-items 50 \
              --query 'Events[].{Time:EventDate,Message:Message,Severity:Severity}' --output table || true
            echo "❌ Smoke test KO"
            exit 1
          fi
          echo "✅ Smoke test OK"
