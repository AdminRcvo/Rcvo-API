name: D√©ploiement STAGING via OIDC (Elastic Beanstalk)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: eb-deploy-staging
  cancel-in-progress: true

env:
  AWS_REGION: eu-west-3
  APP_NAME: Rcvo-backend
  # <<< CHANGE ICI si tu veux d√©ployer ailleurs (rcvo-backend-prod / Rcvo-Backend-env) >>>
  ENV_NAME: Rcvo-Backend-lb

jobs:
  deployer:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::409818814260:role/GithubOIDCRcvoDeploy
          aws-region: ${{ env.AWS_REGION }}

      - name: V√©rifier l‚Äôidentit√© AWS
        run: aws sts get-caller-identity

      # ---------- S√©curit√© : valider que l'environnement existe ----------
      - name: V√©rifier que l‚Äôenvironnement cible existe
        id: envcheck
        shell: bash
        run: |
          set -euo pipefail
          ENV="${ENV_NAME}"
          OUT="$(aws elasticbeanstalk describe-environments \
            --region "${AWS_REGION}" \
            --application-name "${APP_NAME}" \
            --query "Environments[?EnvironmentName=='${ENV}'].{Name:EnvironmentName,Status:Status,Health:Health}" \
            --output text || true)"
          echo "Lookup: $OUT"
          if [[ -z "$OUT" ]]; then
            echo "‚ùå Environnement '${ENV}' introuvable dans l'appli '${APP_NAME}' (region ${AWS_REGION})."
            echo "üìã Environnements existants :"
            aws elasticbeanstalk describe-environments \
              --region "${AWS_REGION}" \
              --application-name "${APP_NAME}" \
              --query "Environments[].{Name:EnvironmentName,Status:Status,Health:Health}" \
              --output table || true
            exit 1
          fi

      - name: Installer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Installer d√©pendances (lockfile si pr√©sent)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f package-lock.json ]; then npm ci; else npm install; fi

      - name: Build (facultatif)
        run: npm run build --if-present

      - name: Cr√©er l‚Äôarchive √† d√©ployer
        id: pack
        shell: bash
        run: |
          set -euo pipefail
          TS="$(date +%Y%m%d_%H%M%S)"
          SHA="${GITHUB_SHA::7}"
          ZIP="app-${SHA}-${TS}.zip"
          echo "zip=$ZIP" >> "$GITHUB_OUTPUT"
          zip -r "$ZIP" . -x ".git/*" "node_modules/*"

      - name: D√©terminer le bucket EB (CreateStorageLocation idempotent)
        id: bucket
        run: |
          BUCKET="$(aws elasticbeanstalk create-storage-location --region "${AWS_REGION}" --query S3Bucket --output text)"
          echo "bucket=$BUCKET" >> "$GITHUB_OUTPUT"

      - name: Upload vers S3
        run: aws s3 cp "${{ steps.pack.outputs.zip }}" "s3://${{ steps.bucket.outputs.bucket }}/${{ steps.pack.outputs.zip }}"

      - name: Cr√©er/Enregistrer la version d‚Äôappli
        id: appver
        shell: bash
        run: |
          set -euo pipefail
          LABEL="${{ steps.pack.outputs.zip }}"
          aws elasticbeanstalk create-application-version \
            --region "${AWS_REGION}" \
            --application-name "${APP_NAME}" \
            --version-label "$LABEL" \
            --source-bundle S3Bucket="${{ steps.bucket.outputs.bucket }}",S3Key="${{ steps.pack.outputs.zip }}" \
          || echo "Version d√©j√† existante"
          echo "label=$LABEL" >> "$GITHUB_OUTPUT"

      # ----------- PR√â-D√âPLOIEMENT : attendre uniquement Status=Ready -----------
      - name: Attendre READY (pr√©-d√©ploiement)
        shell: bash
        run: |
          set -euo pipefail
          ENV="${ENV_NAME}"
          MAX=120   # ~20 minutes (120 * 10s)
          for i in $(seq 1 $MAX); do
            OUT="$(aws elasticbeanstalk describe-environments \
              --region "${AWS_REGION}" \
              --environment-names "$ENV" \
              --query 'Environments[0].[Status,Health]' --output text || true)"
            STATUS="$(echo "$OUT" | awk '{print $1}')"
            HEALTH="$(echo "$OUT" | awk '{print $2}')"
            echo "STATUS=$STATUS  HEALTH=$HEALTH"
            if [[ "$STATUS" == "Ready" ]]; then
              echo "‚úÖ $ENV est READY (health=$HEALTH)."
              exit 0
            fi
            sleep 10
          done
          echo "‚ùå $ENV pas READY apr√®s ~20 min"; exit 1

      - name: D√©ployer sur l‚Äôenvironnement
        run: |
          aws elasticbeanstalk update-environment \
            --region "${AWS_REGION}" \
            --environment-name "${ENV_NAME}" \
            --version-label "${{ steps.appver.outputs.label }}"

      # ----------- POST-D√âPLOIEMENT : attendre Ready + Green (parsing correct) -----------
      - name: Attendre GREEN (post-d√©ploiement)
        shell: bash
        run: |
          set -euo pipefail
          ENV="${ENV_NAME}"
          MAX=90    # ~30 minutes (90 * 20s)
          for i in $(seq 1 $MAX); do
            OUT="$(aws elasticbeanstalk describe-environments \
              --region "${AWS_REGION}" \
              --environment-names "$ENV" \
              --query 'Environments[0].[Health,Status]' --output text || true)"
            HEALTH="$(echo "$OUT" | awk '{print $1}')"   # EB renvoie Health d'abord
            STATUS="$(echo "$OUT" | awk '{print $2}')"
            echo "HEALTH=$HEALTH  STATUS=$STATUS"
            if [[ "$STATUS" == "Ready" && "$HEALTH" == "Green" ]]; then
              echo "‚úÖ $ENV est GREEN & READY."
              exit 0
            fi
            if (( i % 6 == 0 )); then
              echo "--- Derniers √©v√®nements EB (10 min) ---"
              aws elasticbeanstalk describe-events \
                --region "${AWS_REGION}" \
                --environment-name "$ENV" \
                --start-time "$(date -u -d '10 minutes ago' +%Y-%m-%dT%H:%M:%SZ)" \
                --max-records 50 \
                --query 'Events[].{At:EventDate,Sev:Severity,Msg:Message}' --output table || true
              echo "--------------------------------------"
            fi
            sleep 20
          done
          echo "‚ùå Timeout attente GREEN (~30 min)."; exit 1

      - name: Test de fum√©e (/health)
        shell: bash
        run: |
          set -euo pipefail
          CNAME="$(aws elasticbeanstalk describe-environments \
            --region "${AWS_REGION}" \
            --environment-names "${ENV_NAME}" \
            --query 'Environments[0].CNAME' --output text)"
          for SCHEME in https http; do
            URL="${SCHEME}://${CNAME}/health"
            echo "Test: $URL"
            for i in {1..15}; do
              code=$(curl -sk -o /dev/null -w "%{http_code}" "$URL" || true)
              echo "Tentative $i : HTTP $code"
              if [[ "$code" == "200" ]]; then
                echo "‚úÖ Smoke test OK ($URL)"
                exit 0
              fi
              sleep $((i*2))
            done
          done
          echo "‚ùå Smoke test KO"; exit 1
