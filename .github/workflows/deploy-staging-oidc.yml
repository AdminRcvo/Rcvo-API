name: Déploiement STAGING (OIDC)

on:
  push:
    branches: [ main ]  # change si tu veux déclencher sur une autre branche
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-west-3
  APP_NAME: Rcvo-backend            # Nom exact de l'application EB
  ENV_NAME: Rcvo-Backend-staging    # Environnement EB cible (staging)

jobs:
  deployer:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::409818814260:role/GithubOIDCRcvoDeploy
          aws-region: ${{ env.AWS_REGION }}

      - name: Vérifier l’identité AWS
        run: aws sts get-caller-identity

      - name: Installer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Installer dépendances (lockfile si présent)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Build (facultatif)
        run: npm run build --if-present

      - name: Créer l’archive à déployer
        id: pack
        shell: bash
        run: |
          set -euo pipefail
          TS="$(date +%Y%m%d_%H%M%S)"
          SHA="${GITHUB_SHA::7}"
          ZIP="app-${SHA}-${TS}.zip"
          echo "zip=$ZIP" >> "$GITHUB_OUTPUT"
          # ⚠️ exclure l’archive elle-même + .git + node_modules
          zip -r "$ZIP" . -x ".git/*" "node_modules/*" "$ZIP"

      - name: Déterminer le bucket EB (avec fallback)
        id: bucket
        shell: bash
        run: |
          set -euo pipefail
          if BUCKET=$(aws elasticbeanstalk create-storage-location --region "${AWS_REGION}" --query S3Bucket --output text 2>/dev/null); then
            echo "bucket=$BUCKET" >> "$GITHUB_OUTPUT"
          else
            ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
            CANDIDATE="elasticbeanstalk-${AWS_REGION}-${ACCOUNT_ID}"
            # Vérifie qu'il existe
            if aws s3api head-bucket --bucket "$CANDIDATE" 2>/dev/null; then
              echo "bucket=$CANDIDATE" >> "$GITHUB_OUTPUT"
            else
              echo "❌ Impossible d'obtenir le bucket EB" >&2
              exit 1
            fi
          fi

      - name: Upload vers S3
        run: |
          aws s3 cp "${{ steps.pack.outputs.zip }}" "s3://${{ steps.bucket.outputs.bucket }}/${{ steps.pack.outputs.zip }}"

      - name: Créer/Enregistrer la version d’appli
        id: appver
        shell: bash
        run: |
          set -euo pipefail
          LABEL="${{ steps.pack.outputs.zip }}"
          aws elasticbeanstalk create-application-version \
            --region "${AWS_REGION}" \
            --application-name "${APP_NAME}" \
            --version-label "$LABEL" \
            --source-bundle S3Bucket="${{ steps.bucket.outputs.bucket }}",S3Key="${{ steps.pack.outputs.zip }}" \
          || echo "Version déjà existante"
          echo "label=$LABEL" >> "$GITHUB_OUTPUT"

      - name: Attendre que l'environnement soit prêt (pré-déploiement)
        shell: bash
        run: |
          set -euo pipefail
          for i in {1..30}; do
            # On lit Health puis Status (renvoie 'Green  Ready')
            read HEALTH STATUS <<<"$(aws elasticbeanstalk describe-environments \
              --region "${AWS_REGION}" \
              --environment-names "${ENV_NAME}" \
              --query 'Environments[0].[Health,Status]' --output text)"
            echo "STATUS=$STATUS  HEALTH=$HEALTH"
            if [[ "$STATUS" == "Ready" && "$HEALTH" == "Green" ]]; then
              echo "✅ ${ENV_NAME} est prêt."
              exit 0
            fi
            sleep 10
          done
          echo "❌ ${ENV_NAME} pas prêt après ~5 min"; exit 1

      - name: Déployer sur l’environnement
        run: |
          aws elasticbeanstalk update-environment \
            --region "${AWS_REGION}" \
            --environment-name "${ENV_NAME}" \
            --version-label "${{ steps.appver.outputs.label }}"

      - name: Attendre que l’environnement soit GREEN
        shell: bash
        timeout-minutes: 15
        run: |
          set -euo pipefail
          for i in {1..45}; do
            OUT="$(aws elasticbeanstalk describe-environments \
              --region "${AWS_REGION}" \
              --environment-names "${ENV_NAME}" \
              --query 'Environments[0].[Health,Status]' \
              --output text)"
            echo "$OUT"
            HEALTH=$(echo "$OUT" | awk '{print $1}')
STATUS=$(echo "$OUT" | awk '{print $2}')
if [[ "$STATUS" == "Ready" && "$HEALTH" == "Green" ]]; then
  echo "✅ $ENV_NAME est prêt."
  exit 0
fi
            sleep 20
          done
          echo "❌ Timeout"; exit 1

      - name: Test de fumée (/health)
        shell: bash
        run: |
          set -euo pipefail
          CNAME="$(aws elasticbeanstalk describe-environments \
            --region "${AWS_REGION}" \
            --environment-names "${ENV_NAME}" \
            --query 'Environments[0].CNAME' --output text)"
          # STAGING répond en HTTP (LB termine TLS éventuellement en prod) → on tente HTTP puis HTTPS
          URL_HTTP="http://${CNAME}/health"
          URL_HTTPS="https://${CNAME}/health"
          echo "Test HTTP:  $URL_HTTP"
          code=$(curl -s -o /dev/null -w "%{http_code}" "$URL_HTTP" || true)
          echo "Code HTTP: $code"
          if [[ "$code" != "200" ]]; then
            echo "HTTP pas OK, on tente HTTPS…"
            code=$(curl -sk -o /dev/null -w "%{http_code}" "$URL_HTTPS" || true)
            echo "Code HTTPS: $code"
          fi
          [[ "$code" == "200" ]] || (echo "❌ Smoke test KO" && exit 1)
