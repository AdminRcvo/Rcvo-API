name: Déploiement STAGING via OIDC

on:
  push:
    branches: [ main ]            # change à 'staging' si besoin
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: deploy-staging
  cancel-in-progress: true

env:
  AWS_REGION: eu-west-3
  APP_NAME: Rcvo-backend
  ENV_NAME: Rcvo-Backend-staging

jobs:
  deployer:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::409818814260:role/GithubOIDCRcvoDeploy
          aws-region: ${{ env.AWS_REGION }}

      - name: Vérifier l’identité AWS
        run: aws sts get-caller-identity

      - name: Installer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Installer dépendances (lockfile si présent)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Build (facultatif)
        run: npm run build --if-present

      - name: Pack ZIP
        id: pack
        shell: bash
        run: |
          set -euo pipefail
          TS="$(date +%Y%m%d_%H%M%S)"
          SHA="${GITHUB_SHA::7}"
          ZIP="app-${SHA}-${TS}.zip"
          echo "zip=$ZIP" >> "$GITHUB_OUTPUT"
          zip -r "$ZIP" . -x ".git/*" "node_modules/*" "$ZIP"

      - name: Bucket EB (idempotent)
        id: bucket
        shell: bash
        run: |
          set -euo pipefail
          BKT="$(aws elasticbeanstalk create-storage-location --query S3Bucket --output text)"
          echo "bucket=$BKT" >> "$GITHUB_OUTPUT"

      - name: Upload vers S3
        run: aws s3 cp "${{ steps.pack.outputs.zip }}" "s3://${{ steps.bucket.outputs.bucket }}/${{ steps.pack.outputs.zip }}"

      - name: Créer/Enregistrer la version d’appli (idempotent)
        id: appver
        shell: bash
        run: |
          set -euo pipefail
          LABEL="${{ steps.pack.outputs.zip }}"
          aws elasticbeanstalk create-application-version \
            --application-name "${APP_NAME}" \
            --version-label "$LABEL" \
            --source-bundle S3Bucket="${{ steps.bucket.outputs.bucket }}",S3Key="${{ steps.pack.outputs.zip }}" \
          || echo "Version déjà existante"
          echo "label=$LABEL" >> "$GITHUB_OUTPUT"

      # ======== ATTENTE PRE-DEPLOIEMENT: ENV Ready/Green AVANT update ========
      - name: PRE -> attendre Ready/Green (solide)
        shell: bash
        run: |
          set -euo pipefail
          deadline=$((SECONDS + 600)) # 10 min
          while [ $SECONDS -lt $deadline ]; do
            HEALTH="$(aws elasticbeanstalk describe-environments \
              --environment-names "${ENV_NAME}" \
              --query 'Environments[0].Health' --output text | tr -d '\r')"
            STATUS="$(aws elasticbeanstalk describe-environments \
              --environment-names "${ENV_NAME}" \
              --query 'Environments[0].Status' --output text | tr -d '\r')"
            echo "PRE -> HEALTH=$HEALTH  STATUS=$STATUS"
            if [[ "$STATUS" == "Ready" && "$HEALTH" == "Green" ]]; then
              echo "✅ PRE: environnement prêt"
              break
            fi
            sleep 10
          done
          if [[ "$STATUS" != "Ready" || "$HEALTH" != "Green" ]]; then
            echo "❌ PRE: pas Ready/Green dans le délai"
            exit 1
          fi

      - name: Déployer sur l’environnement
        run: |
          aws elasticbeanstalk update-environment \
            --environment-name "${ENV_NAME}" \
            --version-label "${{ steps.appver.outputs.label }}"

      # ======== ATTENTE POST-DEPLOIEMENT: ENV revient Ready/Green ========
      - name: POST -> attendre Ready/Green (solide)
        shell: bash
        run: |
          set -euo pipefail
          deadline=$((SECONDS + 1500)) # 25 min
          while [ $SECONDS -lt $deadline ]; do
            HEALTH="$(aws elasticbeanstalk describe-environments \
              --environment-names "${ENV_NAME}" \
              --query 'Environments[0].Health' --output text | tr -d '\r')"
            STATUS="$(aws elasticbeanstalk describe-environments \
              --environment-names "${ENV_NAME}" \
              --query 'Environments[0].Status' --output text | tr -d '\r')"
            echo "POST -> HEALTH=$HEALTH  STATUS=$STATUS"
            if [[ "$STATUS" == "Ready" && "$HEALTH" == "Green" ]]; then
              echo "✅ POST: environnement prêt"
              exit 0
            fi
            sleep 20
          done
          echo "❌ POST: timeout"
          # Dump 50 derniers events pour diagnostic
          aws elasticbeanstalk describe-events \
            --environment-name "${ENV_NAME}" \
            --max-items 50 \
            --query 'Events[].{Time:EventDate,Severity:Severity,Message:Message}' \
            --output table || true
          exit 1

      - name: Test de fumée (/health) avec retries
        shell: bash
        run: |
          set -euo pipefail
          CNAME="$(aws elasticbeanstalk describe-environments \
            --environment-names "${ENV_NAME}" \
            --query 'Environments[0].CNAME' --output text)"
          URL_HTTPS="https://${CNAME}/health"
          URL_HTTP="http://${CNAME}/health"
          echo "Smoke test: $URL_HTTPS (fallback HTTP si besoin)"
          ok=0
          for i in {1..30}; do
            code=$(curl -sk -o /dev/null -w "%{http_code}" "$URL_HTTPS" || true)
            echo "try#$i HTTPS -> $code"
            if [[ "$code" == "200" ]]; then ok=1; break; fi
            sleep 5
          done
          if [[ $ok -eq 0 ]]; then
            echo "HTTPS pas OK, essai HTTP…"
            for i in {1..12}; do
              code=$(curl -s -o /dev/null -w "%{http_code}" "$URL_HTTP" || true)
              echo "try#$i HTTP -> $code"
              if [[ "$code" == "200" ]]; then ok=1; break; fi
              sleep 5
            done
          fi
          if [[ $ok -ne 1 ]]; then
            echo "❌ Smoke test KO — derniers events EB:"
            aws elasticbeanstalk describe-events \
              --environment-name "${ENV_NAME}" \
              --max-items 50 \
              --query 'Events[].{Time:EventDate,Severity:Severity,Message:Message}' \
              --output table || true
            exit 1
          fi
          echo "✅ Smoke test OK"
