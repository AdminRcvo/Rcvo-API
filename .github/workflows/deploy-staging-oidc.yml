name: Déploiement STAGING via OIDC (Elastic Beanstalk)

on:
  push:
    branches: [ staging ]
  workflow_dispatch:

# Évite les déploiements concurrents qui se marchent dessus
concurrency:
  group: eb-staging
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-west-3
  APP_NAME: Rcvo-backend
  ENV_NAME: Rcvo-Backend-staging
  ROLE_ARN: arn:aws:iam::409818814260:role/GithubOIDCRcvoDeploy

jobs:
  deployer:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Vérifier l’identité AWS
        run: aws sts get-caller-identity

      - name: Installer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Installer dépendances (lockfile si présent)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Build (facultatif)
        run: npm run build --if-present

      - name: Créer l’archive à déployer
        id: pack
        shell: bash
        run: |
          set -euo pipefail
          TS="$(date +%Y%m%d_%H%M%S)"
          SHA="${GITHUB_SHA::7}"
          ZIP="rcvo-${SHA}-${TS}.zip"
          echo "zip=$ZIP" >> "$GITHUB_OUTPUT"
          # exclure .git, node_modules et l’archive elle-même
          zip -r "$ZIP" . -x ".git/*" "node_modules/*" "$ZIP"

      - name: Déterminer le bucket EB (idempotent)
        id: bucket
        shell: bash
        run: |
          set -euo pipefail
          BUCKET="$(aws elasticbeanstalk create-storage-location --query S3Bucket --output text)"
          echo "bucket=$BUCKET" >> "$GITHUB_OUTPUT"
          echo "Bucket EB: $BUCKET"

      - name: Upload vers S3
        shell: bash
        run: |
          set -euo pipefail
          aws s3 cp "${{ steps.pack.outputs.zip }}" "s3://${{ steps.bucket.outputs.bucket }}/${{ steps.pack.outputs.zip }}"

      - name: Créer / enregistrer la version d’appli (idempotent)
        id: appver
        shell: bash
        run: |
          set -euo pipefail
          LABEL="${{ steps.pack.outputs.zip }}"
          aws elasticbeanstalk create-application-version \
            --application-name "${APP_NAME}" \
            --version-label "$LABEL" \
            --source-bundle S3Bucket="${{ steps.bucket.outputs.bucket }}",S3Key="${{ steps.pack.outputs.zip }}" \
          || echo "Version déjà existante, on continue."
          echo "label=$LABEL" >> "$GITHUB_OUTPUT"

      # ---------- GARDE-FOU AVANT UPDATE ----------
      - name: Attendre READY/GREEN (pré-déploiement)
        shell: bash
        run: |
          set -euo pipefail
          deadline=$((SECONDS + 600))  # 10 min
          while (( SECONDS < deadline )); do
            read HEALTH STATUS <<<"$(aws elasticbeanstalk describe-environments \
              --environment-names "${ENV_NAME}" \
              --query 'Environments[0].[Health,Status]' \
              --output text)"
            echo "Pré-déploiement => HEALTH=$HEALTH  STATUS=$STATUS"
            if [[ "$STATUS" == "Ready" && "$HEALTH" == "Green" ]]; then
              echo "OK: environnement prêt pour update."
              break
            fi
            sleep 10
          done
          if [[ "$STATUS" != "Ready" || "$HEALTH" != "Green" ]]; then
            echo "❌ ${ENV_NAME} n'est pas prêt après 10 min."
            aws elasticbeanstalk describe-events --environment-name "${ENV_NAME}" --max-items 50 || true
            exit 1
          fi
          # marge anti 'Must be Ready'
          sleep 45

      - name: Déployer sur l’environnement (update-environment avec retries)
        shell: bash
        run: |
          set -euo pipefail
          LABEL="${{ steps.appver.outputs.label }}"
          for attempt in {1..6}; do
            echo "update-environment (tentative $attempt) -> $LABEL"
            if aws elasticbeanstalk update-environment \
              --environment-name "${ENV_NAME}" \
              --version-label "$LABEL"; then
              echo "Commande envoyée."
              exit 0
            fi
            echo "update-environment a échoué, on attend et on retente…"
            sleep $((attempt * 15))
          done
          echo "❌ Impossible d'envoyer update-environment après plusieurs tentatives."
          exit 1

      # ---------- ATTENTE PENDANT LE DÉPLOIEMENT ----------
      - name: Attendre que l’environnement soit GREEN
        shell: bash
        run: |
          set -euo pipefail
          deadline=$((SECONDS + 1500))  # 25 min
          while (( SECONDS < deadline )); do
            read HEALTH STATUS VERSION <<<"$(aws elasticbeanstalk describe-environments \
              --environment-names "${ENV_NAME}" \
              --query 'Environments[0].[Health,Status,VersionLabel]' \
              --output text)"
            echo "Déploiement => HEALTH=$HEALTH  STATUS=$STATUS  VERSION=$VERSION"
            if [[ "$STATUS" == "Ready" && "$HEALTH" == "Green" && "$VERSION" == "${{ steps.appver.outputs.label }}" ]]; then
              echo "✅ Environnement Ready/Green sur la bonne version."
              exit 0
            fi
            sleep 20
          done
          echo "❌ Timeout sur Ready/Green."
          aws elasticbeanstalk describe-events --environment-name "${ENV_NAME}" --max-items 100 || true
          exit 1

      # ---------- SMOKE TEST ----------
      - name: Smoke test (/health) avec retries + fallback HTTP
        shell: bash
        run: |
          set -euo pipefail
          CNAME="$(aws elasticbeanstalk describe-environments \
            --environment-names "${ENV_NAME}" \
            --query 'Environments[0].CNAME' \
            --output text)"
          URL_HTTPS="https://${CNAME}/health"
          URL_HTTP="http://${CNAME}/health"
          echo "Test santé sur: $URL_HTTPS (fallback $URL_HTTP)"
          # 12 tentatives ~ 3 min
          for i in {1..12}; do
            code=$(curl -sk -o /dev/null -w "%{http_code}" "$URL_HTTPS" || true)
            echo "Tentative $i HTTPS -> $code"
            if [[ "$code" == "200" ]]; then
              echo "✅ Santé OK en HTTPS"
              exit 0
            fi
            # fallback HTTP si 000/timeout/4xx
            code2=$(curl -s -o /dev/null -w "%{http_code}" "$URL_HTTP" || true)
            echo "Tentative $i HTTP  -> $code2"
            if [[ "$code2" == "200" ]]; then
              echo "✅ Santé OK en HTTP (HTTPS pas encore prêt)"
              exit 0
            fi
            sleep 15
          done
          echo "❌ Smoke test KO"
          # dump de derniers events pour diagnostiquer
          aws elasticbeanstalk describe-events --environment-name "${ENV_NAME}" --max-items 50 || true
          exit 1
