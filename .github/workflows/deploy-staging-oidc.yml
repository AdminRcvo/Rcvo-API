name: Déploiement STAGING (OIDC)

on:
  push:
    branches:
      - staging

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: eu-west-3
      ENV_NAME: Rcvo-Backend-staging
      ROLE_ARN: arn:aws:iam::409818814260:role/GithubOIDCRcvoDeploy

    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Installer les dépendances backend
        run: |
          cd backend
          npm ci

      - name: Build backend
        run: |
          cd backend
          npm run build

      - name: Attendre que l'environnement soit READY
        shell: bash
        run: |
          set -euo pipefail
          for i in {1..40}; do
            read -r STATUS HEALTH < <(
              aws elasticbeanstalk describe-environments \
                --environment-names "${ENV_NAME}" \
                --query '[Environments[0].Status, Environments[0].Health]' \
                --output text
            )
            echo "Status=$STATUS  Health=$HEALTH"
            if [[ "$STATUS" == "Ready" ]]; then
              echo "✅ Environnement READY"
              exit 0
            fi
            sleep 15
          done
          echo "❌ L'environnement n'est pas READY (timeout)"; exit 1

      - name: Déployer sur Elastic Beanstalk
        run: |
          zip -r deploy-package.zip backend/*
          aws elasticbeanstalk create-application-version \
            --application-name Rcvo-backend \
            --version-label "build-${GITHUB_SHA}" \
            --source-bundle S3Bucket="rcvo-officiel",S3Key="builds/build-${GITHUB_SHA}.zip"
          aws elasticbeanstalk update-environment \
            --environment-name "${ENV_NAME}" \
            --version-label "build-${GITHUB_SHA}"

      - name: Attendre que l’environnement soit GREEN
        shell: bash
        timeout-minutes: 15
        run: |
          set -euo pipefail
          for i in {1..45}; do
            read -r STATUS HEALTH VERSION < <(
              aws elasticbeanstalk describe-environments \
                --environment-names "${ENV_NAME}" \
                --query '[Environments[0].Status, Environments[0].Health, Environments[0].VersionLabel]' \
                --output text
            )
            echo "Status=$STATUS  Health=$HEALTH  Version=$VERSION"
            if [[ "$STATUS" == "Ready" && "$HEALTH" == "Green" ]]; then
              echo "✅ Environnement GREEN"
              exit 0
            fi
            sleep 20
          done
          echo "❌ Timeout en attente de GREEN"; exit 1
