name: D√©ploiement STAGING (OIDC)

on:
  push:
    branches: [ staging ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-west-3
  APP_NAME: Rcvo-backend                 # Nom exact de l'application EB
  ENV_NAME: Rcvo-Backend-staging         # Environnement EB de staging

jobs:
  deployer:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::409818814260:role/GithubOIDCRcvoDeploy
          aws-region: ${{ env.AWS_REGION }}

      - name: V√©rifier l‚Äôidentit√© AWS
        run: aws sts get-caller-identity

      - name: Installer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Installer d√©pendances (lockfile si pr√©sent)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Build (facultatif)
        run: npm run build --if-present

      - name: Cr√©er l‚Äôarchive √† d√©ployer
        id: pack
        shell: bash
        run: |
          set -euo pipefail
          TS="$(date +%Y%m%d_%H%M%S)"
          SHA="${GITHUB_SHA::7}"
          ZIP="app-${SHA}-${TS}.zip"
          echo "zip=$ZIP" >> "$GITHUB_OUTPUT"
          # Exclure .git, node_modules et l‚Äôarchive elle-m√™me si le job est relanc√©
          zip -r "$ZIP" . -x ".git/*" "node_modules/*" "$ZIP"

      - name: D√©terminer le bucket EB (CreateStorageLocation idempotent)
        id: bucket
        shell: bash
        run: |
          set -euo pipefail
          BUCKET="$(aws elasticbeanstalk create-storage-location --region "${AWS_REGION}" --query S3Bucket --output text)"
          echo "bucket=$BUCKET" >> "$GITHUB_OUTPUT"

      - name: Upload vers S3
        shell: bash
        run: |
          set -euo pipefail
          aws s3 cp "./${{ steps.pack.outputs.zip }}" "s3://${{ steps.bucket.outputs.bucket }}/${{ steps.pack.outputs.zip }}"

      - name: Cr√©er / enregistrer la version d‚Äôapplication (idempotent)
        id: appver
        shell: bash
        run: |
          set -euo pipefail
          LABEL="${{ steps.pack.outputs.zip }}"
          aws elasticbeanstalk create-application-version \
            --region "${AWS_REGION}" \
            --application-name "${APP_NAME}" \
            --version-label "$LABEL" \
            --source-bundle S3Bucket="${{ steps.bucket.outputs.bucket }}",S3Key="${{ steps.pack.outputs.zip }}" \
          || echo "Version d√©j√† existante, on continue."
          echo "label=$LABEL" >> "$GITHUB_OUTPUT"

      # Attente PR√â-d√©ploiement : ordre corrig√© (Health puis Status)
      - name: Attendre que l'environnement soit pr√™t (pr√©-d√©ploiement)
        shell: bash
        run: |
          set -euo pipefail
          for i in {1..30}; do
            read HEALTH STATUS <<<"$(aws elasticbeanstalk describe-environments \
              --region "${AWS_REGION}" \
              --environment-names "${ENV_NAME}" \
              --query 'Environments[0].[Health,Status]' --output text)"
            echo "STATUS=$STATUS  HEALTH=$HEALTH"
            if [[ "$STATUS" == "Ready" && "$HEALTH" == "Green" ]]; then
              echo "‚úÖ ${ENV_NAME} est pr√™t."
              exit 0
            fi
            sleep 10
          done
          echo "‚ùå ${ENV_NAME} pas pr√™t apr√®s ~5 min"
          exit 1

      - name: D√©ployer sur l‚Äôenvironnement
        shell: bash
        run: |
          set -euo pipefail
          aws elasticbeanstalk update-environment \
            --region "${AWS_REGION}" \
            --environment-name "${ENV_NAME}" \
            --version-label "${{ steps.appver.outputs.label }}"

      # Attente POST-d√©ploiement : ordre corrig√© (Health puis Status)
      - name: Attendre que l‚Äôenvironnement soit GREEN
        shell: bash
        timeout-minutes: 15
        run: |
          set -euo pipefail
          for i in {1..45}; do
            OUT="$(aws elasticbeanstalk describe-environments \
              --region "${AWS_REGION}" \
              --environment-names "${ENV_NAME}" \
              --query 'Environments[0].[Health,Status]' \
              --output text)"
            echo "$OUT"
            HEALTH=$(echo "$OUT" | awk '{print $1}')
            STATUS=$(echo "$OUT" | awk '{print $2}')
            if [[ "$STATUS" == "Ready" && "$HEALTH" == "Green" ]]; then
              echo "‚úÖ Environnement pr√™t."
              exit 0
            fi
            sleep 20
          done
          echo "‚ùå Timeout en attente d'un √©tat Ready/Green"
          exit 1

      # Smoke test robuste avec retries + backoff exponentiel et trace verbose en cas d‚Äô√©chec
      - name: Test de fum√©e (/health)
        shell: bash
        run: |
          set -euo pipefail
          CNAME="$(aws elasticbeanstalk describe-environments \
            --region "${AWS_REGION}" \
            --environment-names "${ENV_NAME}" \
            --query 'Environments[0].CNAME' --output text)"

          if [[ -z "$CNAME" || "$CNAME" == "None" ]]; then
            echo "‚ùå CNAME vide, impossible de tester"
            exit 1
          fi

          # Si ton STAGING n‚Äôa pas de TLS, bascule en http://
          URL="https://${CNAME}/health"
          echo "Test de sant√© sur: $URL"

          OK=0
          for i in {1..10}; do
            echo "üîÑ Tentative $i..."
            code=$(curl -sk -o /dev/null -w "%{http_code}" "$URL" || true)
            echo "Code HTTP : $code"
            if [[ "$code" == "200" ]]; then
              echo "‚úÖ Test OK"
              OK=1
              break
            fi
            sleep $((i * 5))
          done

          if [[ "$OK" -eq 0 ]]; then
            echo "‚ùå Test KO apr√®s plusieurs tentatives ‚Äî d√©tails CURL :"
            curl -skv "$URL" || true
            # Tentative de secours en HTTP simple si TLS non pr√©sent en STAGING
            echo "‚õëÔ∏è  Tentative HTTP de secours‚Ä¶"
            URL_FALLBACK="http://${CNAME}/health"
            echo "Fallback: $URL_FALLBACK"
            code=$(curl -s -o /dev/null -w "%{http_code}" "$URL_FALLBACK" || true)
            echo "Code HTTP (fallback): $code"
            [[ "$code" == "200" ]] || (echo "‚ùå Smoke test KO" && exit 1)
            echo "‚úÖ Test OK en HTTP (fallback)"
          fi
