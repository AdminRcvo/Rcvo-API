name: Déploiement STAGING sur Elastic Beanstalk (OIDC)

on:
  push:
    branches: [ staging ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-west-3
  APP_NAME: Rcvo-backend
  ENV_NAME: Rcvo-Backend-staging

jobs:
  deployer:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::409818814260:role/GithubOIDCRcvoDeploy
          aws-region: ${{ env.AWS_REGION }}

      - name: Vérifier l’identité AWS
        run: aws sts get-caller-identity

      - name: Installer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Installer dépendances (lockfile si présent)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Build (facultatif)
        run: npm run build --if-present

      - name: Créer l’archive à déployer
        id: pack
        shell: bash
        run: |
          set -euo pipefail
          TS="$(date +%Y%m%d_%H%M%S)"
          SHA="${GITHUB_SHA::7}"
          ZIP="app-${SHA}-${TS}.zip"
          echo "zip=$ZIP" >> "$GITHUB_OUTPUT"
          zip -r "$ZIP" . -x ".git/*" "node_modules/*"

      - name: Déterminer le bucket EB (CreateStorageLocation idempotent)
        id: bucket
        run: |
          BUCKET="$(aws elasticbeanstalk create-storage-location --query S3Bucket --output text)"
          echo "bucket=$BUCKET" >> "$GITHUB_OUTPUT"

      - name: Upload vers S3
        run: |
          aws s3 cp "${{ steps.pack.outputs.zip }}" "s3://${{ steps.bucket.outputs.bucket }}/${{ steps.pack.outputs.zip }}"

      - name: Créer/Enregistrer la version d’appli
        id: appver
        run: |
          LABEL="${{ steps.pack.outputs.zip }}"
          aws elasticbeanstalk create-application-version \
            --application-name "${APP_NAME}" \
            --version-label "$LABEL" \
            --source-bundle S3Bucket="${{ steps.bucket.outputs.bucket }}",S3Key="${{ steps.pack.outputs.zip }}" \
          || echo "Version déjà existante"
          echo "label=$LABEL" >> "$GITHUB_OUTPUT"

      - name: Attendre que l'environnement soit prêt (pré-déploiement)
        shell: bash
        run: |
          set -euo pipefail
          for i in {1..30}; do
            read STATUS HEALTH <<<"$(aws elasticbeanstalk describe-environments \
              --region "${AWS_REGION}" \
              --environment-names "${ENV_NAME}" \
              --query 'Environments[0].[Status,Health]' --output text)"
            echo "STATUS=$STATUS  HEALTH=$HEALTH"
            if [[ "$STATUS" == "Ready" && "$HEALTH" == "Green" ]]; then
              echo "✅ ${ENV_NAME} est prêt."
              exit 0
            fi
            sleep 10
          done
          echo "❌ ${ENV_NAME} pas prêt après ~5 min"; exit 1

      - name: Déployer sur l’environnement
        run: |
          aws elasticbeanstalk update-environment \
            --environment-name "${ENV_NAME}" \
            --version-label "${{ steps.appver.outputs.label }}"

      - name: Attendre que l’environnement soit GREEN
        shell: bash
        timeout-minutes: 15
        run: |
          set -euo pipefail
          for i in {1..45}; do
            OUT="$(aws elasticbeanstalk describe-environments \
              --environment-names "${ENV_NAME}" \
              --query 'Environments[0].[Health,Status]' \
              --output text)"
            echo "$OUT"
            HEALTH=$(echo "$OUT" | awk '{print $1}')
            STATUS=$(echo "$OUT" | awk '{print $2}')
            if [[ "$STATUS" == "Ready" && "$HEALTH" == "Green" ]]; then
              echo "✅ Environnement prêt."
              exit 0
            fi
            sleep 20
          done
          echo "❌ Timeout"; exit 1

      - name: Test de fumée (/health) – HTTPS puis fallback HTTP
        shell: bash
        run: |
          set -euo pipefail
          CNAME="$(aws elasticbeanstalk describe-environments \
            --region "${AWS_REGION}" \
            --environment-names "${ENV_NAME}" \
            --query 'Environments[0].CNAME' --output text)"

          try_curl () {
            local URL="$1"
            echo "→ Probe ${URL}"
            curl -skS --connect-timeout 5 --max-time 15 \
                 --retry 3 --retry-delay 2 --retry-connrefused \
                 -o /dev/null -w "%{http_code}" "$URL" || true
          }

          CODE_HTTPS=$(try_curl "https://${CNAME}/health")
          echo "HTTPS code: ${CODE_HTTPS}"

          if [[ "${CODE_HTTPS}" != "200" ]]; then
            CODE_HTTP=$(try_curl "http://${CNAME}/health")
            echo "HTTP code: ${CODE_HTTP}"
          else
            CODE_HTTP="000"
          fi

          if [[ "${CODE_HTTPS}" == "200" || "${CODE_HTTP}" == "200" ]]; then
            echo "✅ Smoke test OK"
            exit 0
          fi

          echo "❌ Smoke test KO (HTTPS=${CODE_HTTPS}, HTTP=${CODE_HTTP})"
          echo "— Extrait logs EB pour debug —"
          aws elasticbeanstalk request-environment-info \
            --region "${AWS_REGION}" --environment-name "${ENV_NAME}" --info-type tail || true
          sleep 8
          aws elasticbeanstalk retrieve-environment-info \
            --region "${AWS_REGION}" --environment-name "${ENV_NAME}" --info-type tail \
            --query 'EnvironmentInfo[-1].Message' --output text | xargs -I{} sh -c 'echo "Logs URL: {}"; curl -s "{}" | tail -n 120' || true
          exit 1
