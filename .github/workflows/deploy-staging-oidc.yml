name: D√©ploiement STAGING via OIDC (Elastic Beanstalk)

on:
  push:
    branches: [ staging ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: deploy-staging
  cancel-in-progress: true

env:
  AWS_REGION: eu-west-3
  APP_NAME: Rcvo-backend
  ENV_NAME: Rcvo-Backend-staging
  ROLE_ARN: arn:aws:iam::409818814260:role/GithubOIDCRcvoDeploy

jobs:
  deployer:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: V√©rifier l‚Äôidentit√© AWS
        run: aws sts get-caller-identity

      - name: Installer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Installer d√©pendances (lockfile si pr√©sent)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Build (facultatif)
        run: npm run build --if-present

      - name: Cr√©er l‚Äôarchive √† d√©ployer
        id: pack
        shell: bash
        run: |
          set -euo pipefail
          TS="$(date +%Y%m%d_%H%M%S)"
          SHA="${GITHUB_SHA::7}"
          ZIP="app-${SHA}-${TS}.zip"
          echo "zip=$ZIP" >> "$GITHUB_OUTPUT"
          # Exclure .git, node_modules et le ZIP lui-m√™me si la step rejoue
          zip -r "$ZIP" . -x ".git/*" "node_modules/*" "$ZIP"

      - name: D√©terminer le bucket EB (CreateStorageLocation idempotent)
        id: bucket
        shell: bash
        run: |
          set -euo pipefail
          BUCKET="$(aws elasticbeanstalk create-storage-location --query S3Bucket --output text)"
          echo "bucket=$BUCKET" >> "$GITHUB_OUTPUT"

      - name: Upload ZIP vers S3
        run: |
          aws s3 cp "./${{ steps.pack.outputs.zip }}" "s3://${{ steps.bucket.outputs.bucket }}/${{ steps.pack.outputs.zip }}"

      - name: Cr√©er/Enregistrer la version d‚Äôappli (idempotent)
        id: appver
        shell: bash
        run: |
          set -euo pipefail
          LABEL="${{ steps.pack.outputs.zip }}"
          aws elasticbeanstalk create-application-version \
            --application-name "${APP_NAME}" \
            --version-label "$LABEL" \
            --source-bundle S3Bucket="${{ steps.bucket.outputs.bucket }}",S3Key="${{ steps.pack.outputs.zip }}" \
          || echo "Version d√©j√† existante"
          echo "label=$LABEL" >> "$GITHUB_OUTPUT"

      - name: Attendre READY/GREEN (pr√©-d√©ploiement)
        shell: bash
        env:
          WAIT_SEC: "10"
          MAX_LOOPS: "60"   # ~10 min
        run: |
          set -euo pipefail
          echo "‚è≥ V√©rification pr√©-d√©ploiement ${ENV_NAME} = Ready/Green‚Ä¶"
          for i in $(seq 1 "$MAX_LOOPS"); do
            OUT="$(aws elasticbeanstalk describe-environments \
              --region "${AWS_REGION}" \
              --environment-names "${ENV_NAME}" \
              --query 'Environments[0].[Health,Status]' --output text)"
            HEALTH="$(echo "$OUT" | awk '{print $1}')"
            STATUS="$(echo "$OUT" | awk '{print $2}')"
            echo "(${i}) HEALTH=${HEALTH}  STATUS=${STATUS}"
            if [[ "$STATUS" == "Ready" && ( "$HEALTH" == "Green" || "$HEALTH" == "Ok" ) ]]; then
              echo "‚úÖ Environnement pr√™t pour d√©ployer."
              exit 0
            fi
            sleep "$WAIT_SEC"
          done
          echo "‚ùå ${ENV_NAME} pas pr√™t avant d√©ploiement."
          exit 1

      - name: D√©ployer sur l‚Äôenvironnement
        run: |
          aws elasticbeanstalk update-environment \
            --environment-name "${ENV_NAME}" \
            --version-label "${{ steps.appver.outputs.label }}"

      # -------- Attente post-d√©ploiement SANS timeout GitHub ----------
      - name: Attendre que l‚Äôenvironnement soit GREEN
        shell: bash
        env:
          READY_WAIT_SEC: "20"       # intervalle entre v√©rifs
          READY_TIMEOUT_SEC: "0"     # 0 = illimit√© (la boucle ne timeoute pas)
        run: |
          set -euo pipefail
          trim() { sed 's/^[[:space:]]*//;s/[[:space:]]*$//'; }

          echo "‚è≥ Attente post-d√©ploiement: ${ENV_NAME} -> Ready + Green/Ok"
          start=$(date +%s)

          while : ; do
            OUT="$(aws elasticbeanstalk describe-environments \
              --region "${AWS_REGION}" \
              --environment-names "${ENV_NAME}" \
              --query 'Environments[0].[Health,Status]' --output text)"
            HEALTH="$(echo "$OUT" | awk '{print $1}' | trim)"
            STATUS="$(echo "$OUT" | awk '{print $2}' | trim)"
            echo "$(date '+%H:%M:%S')  HEALTH=${HEALTH}  STATUS=${STATUS}"

            if [[ "${STATUS}" == "Ready" && ( "${HEALTH}" == "Green" || "${HEALTH}" == "Ok" ) ]]; then
              echo "‚úÖ Environnement pr√™t."
              break
            fi

            if [[ "${READY_TIMEOUT_SEC}" -gt 0 ]]; then
              now=$(date +%s); elapsed=$((now-start))
              if (( elapsed > READY_TIMEOUT_SEC )); then
                echo "‚ùå Timeout apr√®s ${READY_TIMEOUT_SEC}s d'attente."
                exit 1
              fi
            fi

            sleep "${READY_WAIT_SEC}"
          done

      - name: Test de fum√©e (/health) avec retries + fallback
        shell: bash
        env:
          RETRIES: "30"
          SLEEP_SEC: "5"
        run: |
          set -euo pipefail
          CNAME="$(aws elasticbeanstalk describe-environments \
            --environment-names "${ENV_NAME}" \
            --query 'Environments[0].CNAME' --output text)"
          echo "CNAME=${CNAME}"

          URLS=("https://${CNAME}/health" "http://${CNAME}/health")
          for URL in "${URLS[@]}"; do
            echo "üåê Test: $URL"
            for i in $(seq 1 "$RETRIES"); do
              CODE=$(curl -sk -o /dev/null -w "%{http_code}" "$URL" || true)
              echo "  tentative ${i}/${RETRIES} -> ${CODE}"
              if [[ "$CODE" == "200" ]]; then
                echo "‚úÖ Health OK sur ${URL}"
                exit 0
              fi
              sleep "$SLEEP_SEC"
            done
          done
          echo "‚ùå Health KO sur HTTPS et HTTP."
          exit 1

      # --------- AIDE DIAG EN CAS D'√âCHEC -----------
      - name: (Diag) Derniers √©v√©nements EB (si √©chec)
        if: failure()
        shell: bash
        run: |
          set -euo pipefail
          echo "üìú Derniers √©v√©nements EB (30 min)‚Ä¶"
          aws elasticbeanstalk describe-events \
            --region "${AWS_REGION}" \
            --environment-name "${ENV_NAME}" \
            --start-time "$(date -u -d '30 minutes ago' +%Y-%m-%dT%H:%M:%SZ)" \
            --max-records 200 \
            --query 'Events[].{Time:EventDate,Sev:Severity,Msg:Message}' \
            --output table || true

      - name: (Diag) Bundle de logs (si √©chec)
        if: failure()
        shell: bash
        run: |
          set -euo pipefail
          echo "üì¶ Demande de bundle de logs‚Ä¶"
          aws elasticbeanstalk request-environment-info \
            --region "${AWS_REGION}" \
            --environment-name "${ENV_NAME}" \
            --info-type tail || true
          sleep 20
          echo "‚¨áÔ∏è  R√©cup√©ration des liens de logs:"
          aws elasticbeanstalk retrieve-environment-info \
            --region "${AWS_REGION}" \
            --environment-name "${ENV_NAME}" \
            --info-type tail \
            --query 'EnvironmentInfo[].{When:SampleTimestamp,URL:Message}' \
            --output table || true
