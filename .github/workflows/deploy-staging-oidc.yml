name: D√©ploiement STAGING via OIDC (Elastic Beanstalk)

on:
  push:
    branches: [ staging ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: deploy-staging-eb
  cancel-in-progress: true

env:
  AWS_REGION: eu-west-3
  APP_NAME: Rcvo-backend
  ENV_NAME: Rcvo-Backend-staging

jobs:
  deployer:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::409818814260:role/GithubOIDCRcvoDeploy
          aws-region: ${{ env.AWS_REGION }}

      - name: V√©rifier l‚Äôidentit√© AWS
        run: aws sts get-caller-identity

      - name: Installer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Installer d√©pendances (lockfile si pr√©sent)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Build (facultatif)
        run: npm run build --if-present

      - name: Cr√©er l‚Äôarchive √† d√©ployer
        id: pack
        shell: bash
        run: |
          set -euo pipefail
          TS="$(date +%Y%m%d_%H%M%S)"
          SHA="${GITHUB_SHA::7}"
          ZIP="app-${SHA}-${TS}.zip"
          echo "zip=$ZIP" >> "$GITHUB_OUTPUT"
          # exclure .git, node_modules et l‚Äôarchive
          zip -r "$ZIP" . -x ".git/*" "node_modules/*" "$ZIP"

      - name: D√©terminer le bucket EB (CreateStorageLocation idempotent)
        id: bucket
        shell: bash
        run: |
          set -euo pipefail
          BUCKET="$(aws elasticbeanstalk create-storage-location --region "${AWS_REGION}" --query S3Bucket --output text)"
          echo "bucket=$BUCKET" >> "$GITHUB_OUTPUT"

      - name: Upload vers S3
        run: |
          aws s3 cp "./${{ steps.pack.outputs.zip }}" "s3://${{ steps.bucket.outputs.bucket }}/${{ steps.pack.outputs.zip }}"

      - name: Cr√©er/Enregistrer la version d‚Äôappli (idempotent)
        id: appver
        shell: bash
        run: |
          set -euo pipefail
          LABEL="${{ steps.pack.outputs.zip }}"
          aws elasticbeanstalk create-application-version \
            --region "${AWS_REGION}" \
            --application-name "${APP_NAME}" \
            --version-label "$LABEL" \
            --source-bundle S3Bucket="${{ steps.bucket.outputs.bucket }}",S3Key="${{ steps.pack.outputs.zip }}" \
          || echo "Version d√©j√† existante, on continue."
          echo "label=$LABEL" >> "$GITHUB_OUTPUT"

      - name: Attendre READY/GREEN (pr√©-d√©ploiement)
        shell: bash
        env:
          READY_WAIT_SEC: "10"
          READY_TIMEOUT_SEC: "600"   # 10 min
        run: |
          set -euo pipefail
          echo "‚è≥ Pr√©-check ${ENV_NAME}‚Ä¶"
          start=$(date +%s)
          while : ; do
            read -r HEALTH STATUS < <(
              aws elasticbeanstalk describe-environments \
                --region "${AWS_REGION}" \
                --environment-names "${ENV_NAME}" \
                --query 'Environments[0].[Health,Status]' \
                --output text
            )
            now=$(date +%s); elapsed=$((now-start))
            echo "t=+${elapsed}s  HEALTH=${HEALTH}  STATUS=${STATUS}"
            if [[ "${STATUS}" == "Ready" && ( "${HEALTH}" == "Green" || "${HEALTH}" == "Ok" ) ]]; then
              echo "‚úÖ Pr√©-check OK."
              break
            fi
            if (( elapsed > READY_TIMEOUT_SEC )); then
              echo "‚ùå Pr√©-check timeout apr√®s ${READY_TIMEOUT_SEC}s"; exit 1
            fi
            sleep "${READY_WAIT_SEC}"
          done

      - name: D√©ployer sur l‚Äôenvironnement
        run: |
          aws elasticbeanstalk update-environment \
            --region "${AWS_REGION}" \
            --environment-name "${ENV_NAME}" \
            --version-label "${{ steps.appver.outputs.label }}"

      - name: Attendre READY/GREEN (post-d√©ploiement, robuste)
        shell: bash
        timeout-minutes: 25
        env:
          READY_WAIT_SEC: "25"
          READY_TIMEOUT_SEC: "1500"  # 25 min
        run: |
          set -euo pipefail
          echo "‚è≥ Attente post-d√©ploiement ${ENV_NAME} (Ready & Green/Ok)‚Ä¶"
          start=$(date +%s)
          while : ; do
            read -r HEALTH STATUS < <(
              aws elasticbeanstalk describe-environments \
                --region "${AWS_REGION}" \
                --environment-names "${ENV_NAME}" \
                --query 'Environments[0].[Health,Status]' \
                --output text
            )
            now=$(date +%s); elapsed=$((now-start))
            echo "t=+${elapsed}s  HEALTH=${HEALTH}  STATUS=${STATUS}"
            if [[ "${STATUS}" == "Ready" && ( "${HEALTH}" == "Green" || "${HEALTH}" == "Ok" ) ]]; then
              echo "‚úÖ ${ENV_NAME} pr√™t."
              break
            fi
            if (( elapsed > READY_TIMEOUT_SEC )); then
              echo "‚ùå Timeout post-d√©ploiement apr√®s ${READY_TIMEOUT_SEC}s"
              exit 1
            fi
            sleep "${READY_WAIT_SEC}"
          done

      - name: Test de fum√©e (/health) avec retries + fallback
        shell: bash
        env:
          SMOKE_TRIES: "18"   # ~3‚Äì6 min selon backoff
        run: |
          set -euo pipefail
          CNAME="$(aws elasticbeanstalk describe-environments \
            --region "${AWS_REGION}" \
            --environment-names "${ENV_NAME}" \
            --query 'Environments[0].CNAME' --output text)"
          URL_HTTPS="https://${CNAME}/health"
          URL_HTTP="http://${CNAME}/health"
          echo "Smoke test sur: ${URL_HTTPS} (fallback ${URL_HTTP})"

          ok=0
          for i in $(seq 1 ${SMOKE_TRIES}); do
            code=$(curl -sk -o /dev/null -w "%{http_code}" "${URL_HTTPS}" || true)
            echo "Tentative ${i}: HTTPS -> ${code}"
            if [[ "${code}" == "200" ]]; then ok=1; break; fi
            # fallback HTTP si HTTPS pas dispo (LB/SSL qui tarde)
            code=$(curl -s -o /dev/null -w "%{http_code}" "${URL_HTTP}" || true)
            echo "Tentative ${i}: HTTP  -> ${code}"
            if [[ "${code}" == "200" ]]; then ok=1; break; fi
            sleep $(( i < 8 ? 10 : 20 ))
          done
          if [[ "${ok}" != "1" ]]; then
            echo "‚ùå Smoke test KO"
            exit 1
          fi
          echo "‚úÖ Smoke test OK"

      # --- Diagnostics toujours dispo en fin de run ---

      - name: üîé Derniers √©v√©nements EB (30 min)
        if: ${{ always() }}
        shell: bash
        run: |
          set -euo pipefail
          SINCE="$(date -u -d '30 minutes ago' +%Y-%m-%dT%H:%M:%SZ)"
          echo "---- √âv√©nements depuis ${SINCE} ----"
          aws elasticbeanstalk describe-events \
            --region "${AWS_REGION}" \
            --environment-name "${ENV_NAME}" \
            --start-time "$SINCE" \
            --max-records 200 \
            --query 'Events[].{Time:EventDate,Sev:Severity,Msg:Message}' \
            --output table || true

      - name: üìú Tail des logs EB (si √©chec)
        if: ${{ failure() }}
        shell: bash
        run: |
          set -euo pipefail
          echo "---- Demande tail logs EB ----"
          aws elasticbeanstalk request-environment-info \
            --region "${AWS_REGION}" \
            --environment-name "${ENV_NAME}" \
            --info-type tail || true
          sleep 20
          echo "---- URLs bundles logs ----"
          aws elasticbeanstalk retrieve-environment-info \
            --region "${AWS_REGION}" \
            --environment-name "${ENV_NAME}" \
            --info-type tail \
            --query 'EnvironmentInfo[].{When:SampleTimestamp,URL:Message}' \
            --output table || true
