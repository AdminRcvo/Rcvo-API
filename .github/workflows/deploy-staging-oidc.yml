name: Déploiement STAGING (OIDC)

on:
  push:
    branches: [ main ]     # ← mets "staging" si tu déclenches depuis la branche staging
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: rcvo-staging
  cancel-in-progress: true

env:
  AWS_REGION: eu-west-3
  APP_NAME: Rcvo-backend
  ENV_NAME: Rcvo-Backend-staging
  # si jamais tu veux renvoyer le healthcheck en HTTP temporairement, change HEALTH_SCHEME en http
  HEALTH_SCHEME: https

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::409818814260:role/GithubOIDCRcvoDeploy
          aws-region: ${{ env.AWS_REGION }}

      - name: Vérifier l’identité AWS
        run: aws sts get-caller-identity

      - name: Installer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Installer dépendances (lockfile si présent)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Build (facultatif)
        run: npm run build --if-present

      # Emballage léger; EB décompresse côté instance
      - name: Créer l’archive à déployer
        id: pack
        shell: bash
        run: |
          set -euo pipefail
          TS="$(date +%Y%m%d_%H%M%S)"
          SHA="${GITHUB_SHA::7}"
          ZIP="app-${SHA}-${TS}.zip"
          echo "zip=$ZIP" >> "$GITHUB_OUTPUT"
          zip -r "$ZIP" . -x ".git/*" "node_modules/*" "$ZIP"

      - name: Déterminer le bucket EB (idempotent)
        id: bucket
        run: |
          BUCKET="$(aws elasticbeanstalk create-storage-location --query S3Bucket --output text)"
          echo "bucket=$BUCKET" >> "$GITHUB_OUTPUT"

      - name: Upload vers S3
        run: |
          aws s3 cp "${{ steps.pack.outputs.zip }}" "s3://${{ steps.bucket.outputs.bucket }}/${{ steps.pack.outputs.zip }}"

      - name: Créer / enregistrer la version d’appli
        id: appver
        shell: bash
        run: |
          set -euo pipefail
          LABEL="${{ steps.pack.outputs.zip }}"
          aws elasticbeanstalk create-application-version \
            --application-name "${APP_NAME}" \
            --version-label "$LABEL" \
            --source-bundle S3Bucket="${{ steps.bucket.outputs.bucket }}",S3Key="${{ steps.pack.outputs.zip }}" \
          || echo "✔️ Version déjà existante"
          echo "label=$LABEL" >> "$GITHUB_OUTPUT"

      # ---- Attente PRE-DEPLOY (Ready/Green) sans timeout rigide GitHub ----
      - name: Attendre ENV Ready/Green (pré-déploiement)
        shell: bash
        run: |
          set -euo pipefail
          MAX_SEC=$((30*60))   # 30 minutes max
          STEP=15
          ELAPSED=0
          while [ $ELAPSED -lt $MAX_SEC ]; do
            read HEALTH STATUS <<<"$(aws elasticbeanstalk describe-environments \
              --region "${AWS_REGION}" \
              --environment-names "${ENV_NAME}" \
              --query 'Environments[0].[Health,Status]' \
              --output text 2>/dev/null || true)"
            echo "PRE  | STATUS=${STATUS:-None} HEALTH=${HEALTH:-None}  (t+${ELAPSED}s)"
            if [[ "$STATUS" == "Ready" && "$HEALTH" == "Green" ]]; then
              echo "✅ ${ENV_NAME} prêt pour déploiement."
              break
            fi
            sleep $STEP
            ELAPSED=$((ELAPSED + STEP))
          done
          if [[ "$STATUS" != "Ready" || "$HEALTH" != "Green" ]]; then
            echo "❌ ${ENV_NAME} pas prêt après $MAX_SEC s"
            exit 1
          fi

      - name: Déployer sur l’environnement
        run: |
          aws elasticbeanstalk update-environment \
            --environment-name "${ENV_NAME}" \
            --version-label "${{ steps.appver.outputs.label }}"

      # ---- Attente POST-DEPLOY (Ready/Green) ----
      - name: Attendre ENV Ready/Green (post-déploiement)
        shell: bash
        run: |
          set -euo pipefail
          MAX_SEC=$((45*60))   # 45 minutes max (déploiement + eventuels rolling)
          STEP=15
          ELAPSED=0
          while [ $ELAPSED -lt $MAX_SEC ]; do
            read HEALTH STATUS VERSION <<<"$(aws elasticbeanstalk describe-environments \
              --region "${AWS_REGION}" \
              --environment-names "${ENV_NAME}" \
              --query 'Environments[0].[Health,Status,VersionLabel]' \
              --output text 2>/dev/null || true)"
            echo "POST | STATUS=${STATUS:-None} HEALTH=${HEALTH:-None} VERSION=${VERSION:-None} (t+${ELAPSED}s)"
            if [[ "$STATUS" == "Ready" && "$HEALTH" == "Green" && "$VERSION" == "${{ steps.appver.outputs.label }}" ]]; then
              echo "✅ ${ENV_NAME} déployé et sain."
              break
            fi
            sleep $STEP
            ELAPSED=$((ELAPSED + STEP))
          done
          if [[ "$STATUS" != "Ready" || "$HEALTH" != "Green" || "$VERSION" != "${{ steps.appver.outputs.label }}" ]]; then
            echo "❌ ${ENV_NAME} pas sain après $MAX_SEC s"
            exit 1
          fi

      - name: Smoke test /health (retries avec backoff)
        shell: bash
        run: |
          set -euo pipefail
          CNAME="$(aws elasticbeanstalk describe-environments \
            --region "${AWS_REGION}" \
            --environment-names "${ENV_NAME}" \
            --query 'Environments[0].CNAME' --output text)"
          URL="${HEALTH_SCHEME}://${CNAME}/health"
          echo "Test: $URL"
          for i in $(seq 1 30); do
            code=$(curl -sk -o /dev/null -w "%{http_code}" "$URL" || true)
            echo "Tentative $i → HTTP $code"
            if [[ "$code" == "200" ]]; then
              echo "✅ Smoke test OK"
              exit 0
            fi
            sleep $((i*5))
          done
          echo "❌ Smoke test KO"
          exit 1

      # ---- DIAGNOSTICS EN CAS D'ÉCHEC EN AVAL ----
      - name: (Diag) Derniers events EB (30 min)
        if: failure()
        shell: bash
        run: |
          aws elasticbeanstalk describe-events \
            --region "${AWS_REGION}" \
            --environment-name "${ENV_NAME}" \
            --start-time "$(date -u -d '30 minutes ago' +%Y-%m-%dT%H:%M:%SZ)" \
            --max-records 200 \
            --query 'Events[].{Time:EventDate,Sev:Severity,Msg:Message}' \
            --output table || true

      - name: (Diag) Tail des logs EB
        if: failure()
        shell: bash
        run: |
          aws elasticbeanstalk request-environment-info \
            --region "${AWS_REGION}" \
            --environment-name "${ENV_NAME}" \
            --info-type tail || true
          sleep 20
          aws elasticbeanstalk retrieve-environment-info \
            --region "${AWS_REGION}" \
            --environment-name "${ENV_NAME}" \
            --info-type tail \
            --query 'EnvironmentInfo[].{When:SampleTimestamp,URL:Message}' \
            --output table || true
