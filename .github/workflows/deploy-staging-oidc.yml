name: Déploiement STAGING (OIDC → Elastic Beanstalk)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: eb-staging-${{ github.ref }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-west-3
  APP_NAME: Rcvo-backend
  ENV_NAME: Rcvo-Backend-staging

jobs:
  deployer:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::409818814260:role/GithubOIDCRcvoDeploy
          aws-region: ${{ env.AWS_REGION }}

      - name: Vérifier l’identité AWS
        run: aws sts get-caller-identity

      - name: Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Installer dépendances
        shell: bash
        run: |
          set -euo pipefail
          if [ -f package-lock.json ]; then npm ci; else npm i; fi

      - name: Build (facultatif)
        run: npm run build --if-present

      - name: Pack ZIP
        id: pack
        shell: bash
        run: |
          set -euo pipefail
          SHA="${GITHUB_SHA::7}"
          TS="$(date +%Y%m%d_%H%M%S)"
          ZIP="app-${SHA}-${TS}.zip"
          echo "zip=$ZIP" >> "$GITHUB_OUTPUT"
          zip -r "$ZIP" . -x ".git/*" "node_modules/*" "**/*.zip"

      - name: Bucket EB (idempotent)
        id: bucket
        run: |
          set -euo pipefail
          BUCKET="$(aws elasticbeanstalk create-storage-location --query S3Bucket --output text)"
          echo "bucket=$BUCKET" >> "$GITHUB_OUTPUT"

      - name: Upload vers S3
        run: |
          aws s3 cp "${{ steps.pack.outputs.zip }}" "s3://${{ steps.bucket.outputs.bucket }}/${{ steps.pack.outputs.zip }}"

      - name: Enregistrer la version d’appli
        id: appver
        run: |
          set -euo pipefail
          LABEL="${{ steps.pack.outputs.zip }}"
          aws elasticbeanstalk create-application-version \
            --application-name "${APP_NAME}" \
            --version-label "$LABEL" \
            --source-bundle S3Bucket="${{ steps.bucket.outputs.bucket }}",S3Key="${{ steps.pack.outputs.zip }}" \
          || echo "Version déjà existante"
          echo "label=$LABEL" >> "$GITHUB_OUTPUT"

      # ---------- Attente PRE-déploiement : Ready/Green ----------
      - name: Attendre READY/GREEN (pré-déploiement)
        shell: bash
        run: |
          set -euo pipefail
          REGION="${AWS_REGION}"
          ENV="${ENV_NAME}"
          deadline=$((SECONDS+1800)) # 30 min max
          while (( SECONDS < deadline )); do
            STATUS=$(aws elasticbeanstalk describe-environments --region "$REGION" \
              --environment-names "$ENV" --query 'Environments[0].Status' --output text 2>/dev/null || echo None)
            HEALTH=$(aws elasticbeanstalk describe-environments --region "$REGION" \
              --environment-names "$ENV" --query 'Environments[0].Health' --output text 2>/dev/null || echo None)
            echo "STATUS=$STATUS  HEALTH=$HEALTH"
            if [[ "$STATUS" == "Ready" && "$HEALTH" == "Green" ]]; then
              echo "✅ $ENV prêt (pré-déploiement)."
              exit 0
            fi
            sleep 10
          done
          echo "❌ $ENV pas prêt avant déploiement (30 min)."
          aws elasticbeanstalk describe-events --region "$REGION" --environment-name "$ENV" \
            --start-time "$(date -u -d '30 minutes ago' +%Y-%m-%dT%H:%M:%SZ)" \
            --max-records 50 --query 'Events[].{Time:EventDate,Sev:Severity,Msg:Message}' --output table || true
          exit 1

      - name: Déployer sur l’environnement (update-environment)
        run: |
          aws elasticbeanstalk update-environment \
            --environment-name "${ENV_NAME}" \
            --version-label "${{ steps.appver.outputs.label }}"

      # ---------- Attente POST-déploiement : Ready/Green ----------
      - name: Attendre READY/GREEN (post-déploiement)
        shell: bash
        run: |
          set -euo pipefail
          REGION="${AWS_REGION}"
          ENV="${ENV_NAME}"
          deadline=$((SECONDS+2400)) # 40 min max
          while (( SECONDS < deadline )); do
            STATUS=$(aws elasticbeanstalk describe-environments --region "$REGION" \
              --environment-names "$ENV" --query 'Environments[0].Status' --output text 2>/dev/null || echo None)
            HEALTH=$(aws elasticbeanstalk describe-environments --region "$REGION" \
              --environment-names "$ENV" --query 'Environments[0].Health' --output text 2>/dev/null || echo None)
            echo "STATUS=$STATUS  HEALTH=$HEALTH"
            if [[ "$STATUS" == "Ready" && "$HEALTH" == "Green" ]]; then
              echo "✅ Environnement READY/GREEN."
              exit 0
            fi
            sleep 15
          done
          echo "❌ Timeout post-déploiement."
          aws elasticbeanstalk describe-events --region "$REGION" --environment-name "$ENV" \
            --start-time "$(date -u -d '40 minutes ago' +%Y-%m-%dT%H:%M:%SZ)" \
            --max-records 100 --query 'Events[].{Time:EventDate,Sev:Severity,Msg:Message}' --output table || true
          exit 1

      - name: Smoke test (/health) HTTP + HTTPS (retries)
        shell: bash
        run: |
          set -euo pipefail
          REGION="${AWS_REGION}"
          ENV="${ENV_NAME}"
          CNAME=$(aws elasticbeanstalk describe-environments --region "$REGION" \
            --environment-names "$ENV" --query 'Environments[0].CNAME' --output text)
          echo "CNAME=$CNAME"
          URL_HTTPS="https://${CNAME}/health"
          URL_HTTP="http://${CNAME}/health"

          # 15 tentatives, backoff simple
          ok=0
          for i in $(seq 1 15); do
            code=$(curl -sk -o /dev/null -w "%{http_code}" "$URL_HTTPS" || true)
            echo "Try $i HTTPS -> $code"
            if [[ "$code" == "200" ]]; then ok=1; break; fi
            code=$(curl -s -o /dev/null -w "%{http_code}" "$URL_HTTP" || true)
            echo "Try $i HTTP  -> $code"
            if [[ "$code" == "200" ]]; then ok=1; break; fi
            sleep $((i*2))
          done
          if [[ "$ok" -ne 1 ]]; then
            echo "❌ /health KO"
            exit 1
          fi
          echo "✅ /health OK"
