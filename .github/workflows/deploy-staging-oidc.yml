name: Déploiement STAGING sur Elastic Beanstalk (OIDC)

on:
  push:
    branches: [ staging ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-west-3
  APP_NAME: Rcvo-backend                 # nom exact de l'application EB
  ENV_NAME: Rcvo-Backend-staging         # environnement EB cible

jobs:
  deployer:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::409818814260:role/GithubOIDCRcvoDeploy
          aws-region: ${{ env.AWS_REGION }}

      - name: Vérifier l’identité AWS
        run: aws sts get-caller-identity

      - name: Installer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Installer dépendances (lockfile si présent)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Build (facultatif)
        run: npm run build --if-present

      # --- Packaging & upload S3 ---
      - name: Créer l’archive à déployer
        id: pack
        shell: bash
        run: |
          set -euo pipefail
          TS="$(date +%Y%m%d_%H%M%S)"
          SHA="${GITHUB_SHA::7}"
          ZIP="app-${SHA}-${TS}.zip"
          echo "zip=$ZIP" >> "$GITHUB_OUTPUT"
          # Exclure .git, node_modules et l’archive elle-même
          zip -r "$ZIP" . -x ".git/*" "node_modules/*" "$ZIP"

      - name: Déterminer le bucket EB (idempotent)
        id: bucket
        shell: bash
        run: |
          set -euo pipefail
          BUCKET="$(aws elasticbeanstalk create-storage-location --region "${AWS_REGION}" --query S3Bucket --output text)"
          echo "bucket=$BUCKET" >> "$GITHUB_OUTPUT"

      - name: Upload vers S3
        run: |
          aws s3 cp "./${{ steps.pack.outputs.zip }}" "s3://${{ steps.bucket.outputs.bucket }}/${{ steps.pack.outputs.zip }}"

      - name: Créer/Enregistrer la version d’appli (idempotent)
        id: appver
        shell: bash
        run: |
          set -euo pipefail
          LABEL="${{ steps.pack.outputs.zip }}"
          aws elasticbeanstalk create-application-version \
            --region "${AWS_REGION}" \
            --application-name "${APP_NAME}" \
            --version-label "$LABEL" \
            --source-bundle S3Bucket="${{ steps.bucket.outputs.bucket }}",S3Key="${{ steps.pack.outputs.zip }}" \
          || echo "Version déjà existante (ok)."
          echo "label=$LABEL" >> "$GITHUB_OUTPUT"

      # --- Attente READINESS avant update (évite 'Must be Ready') ---
      - name: Attendre READY/GREEN (pré-déploiement)
        shell: bash
        timeout-minutes: 10
        run: |
          set -euo pipefail
          for i in {1..60}; do
            STATUS="$(aws elasticbeanstalk describe-environments --region "${AWS_REGION}" --environment-names "${ENV_NAME}" --query 'Environments[0].Status' --output text || true)"
            HEALTH="$(aws  elasticbeanstalk describe-environments --region "${AWS_REGION}" --environment-names "${ENV_NAME}" --query 'Environments[0].Health' --output text || true)"
            echo "STATUS=$STATUS  HEALTH=$HEALTH"
            if [[ "$STATUS" == "Ready" && "$HEALTH" == "Green" ]]; then
              echo "✅ ${ENV_NAME} est prêt."
              exit 0
            fi
            sleep 10
          done
          echo "❌ ${ENV_NAME} pas prêt après ~10 min"; exit 1

      # --- Déploiement ---
      - name: Déployer sur l’environnement
        run: |
          aws elasticbeanstalk update-environment \
            --region "${AWS_REGION}" \
            --environment-name "${ENV_NAME}" \
            --version-label "${{ steps.appver.outputs.label }}"

      # --- Attente READINESS après update (requêtes séparées -> zéro ambiguïté) ---
      - name: Attendre que l’environnement soit GREEN
        shell: bash
        timeout-minutes: 25
        run: |
          set -euo pipefail
          for i in {1..150}; do   # 150 * 10s = ~25 min
            STATUS="$(aws elasticbeanstalk describe-environments --region "${AWS_REGION}" --environment-names "${ENV_NAME}" --query 'Environments[0].Status' --output text || true)"
            HEALTH="$(aws  elasticbeanstalk describe-environments --region "${AWS_REGION}" --environment-names "${ENV_NAME}" --query 'Environments[0].Health' --output text || true)"
            echo "STATUS=$STATUS  HEALTH=$HEALTH"
            if [[ "$STATUS" == "Ready" && "$HEALTH" == "Green" ]]; then
              echo "✅ Environnement prêt."
              exit 0
            fi
            sleep 10
          done
          echo "❌ Timeout d’attente (environnement non GREEN/Ready)"; exit 1

      # --- Smoke test robuste /health (HTTPS puis fallback HTTP) ---
      - name: Test de fumée (/health)
        shell: bash
        run: |
          set -euo pipefail
          CNAME="$(aws elasticbeanstalk describe-environments \
            --region "${AWS_REGION}" \
            --environment-names "${ENV_NAME}" \
            --query 'Environments[0].CNAME' --output text)"
          URL_HTTPS="https://${CNAME}/health"
          URL_HTTP="http://${CNAME}/health"
          echo "Test HTTPS: $URL_HTTPS"

          ok=""
          for i in {1..30}; do
            code=$(curl -sk -o /dev/null -w "%{http_code}" "$URL_HTTPS" || true)
            echo "Tentative $i (HTTPS) : $code"
            if [[ "$code" == "200" ]]; then ok="yes"; break; fi
            sleep 5
          done

          if [[ -z "$ok" ]]; then
            echo "HTTPS non concluant, essai HTTP… ($URL_HTTP)"
            for i in {1..12}; do
              code=$(curl -s -o /dev/null -w "%{http_code}" "$URL_HTTP" || true)
              echo "Tentative $i (HTTP) : $code"
              if [[ "$code" == "200" ]]; then ok="yes"; break; fi
              sleep 5
            done
          fi

          if [[ -z "$ok" ]]; then
            echo "❌ Smoke test KO (ni HTTPS ni HTTP ne répond en 200)"
            echo "Diag rapide (1 requête verbeuse HTTPS) :"
            curl -skv "$URL_HTTPS" || true
            exit 1
          fi

          echo "✅ Smoke test OK"
