name: D√©ploiement STAGING via OIDC (Elastic Beanstalk)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: rcvo-staging-eb
  cancel-in-progress: false

env:
  AWS_REGION: eu-west-3
  APP_NAME: Rcvo-backend
  ENV_NAME: Rcvo-Backend-staging
  ROLE_ARN: arn:aws:iam::409818814260:role/GithubOIDCRcvoDeploy

jobs:
  deployer:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: V√©rifier l‚Äôidentit√© AWS
        run: aws sts get-caller-identity

      - name: Installer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Installer d√©pendances (lockfile si pr√©sent)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Build (facultatif)
        run: npm run build --if-present

      - name: Cr√©er l‚Äôarchive √† d√©ployer
        id: pack
        shell: bash
        run: |
          set -euo pipefail
          TS="$(date +%Y%m%d_%H%M%S)"
          SHA="${GITHUB_SHA::7}"
          ZIP="app-${SHA}-${TS}.zip"
          echo "zip=$ZIP" >> "$GITHUB_OUTPUT"
          zip -r "$ZIP" . -x ".git/*" "node_modules/*"

      - name: D√©terminer le bucket EB (CreateStorageLocation idempotent)
        id: bucket
        shell: bash
        run: |
          set -euo pipefail
          BUCKET="$(aws elasticbeanstalk create-storage-location --query S3Bucket --output text)"
          echo "bucket=$BUCKET" >> "$GITHUB_OUTPUT"
          echo "Bucket EB: $BUCKET"

      - name: Upload vers S3
        shell: bash
        run: |
          set -euo pipefail
          aws s3 cp "${{ steps.pack.outputs.zip }}" "s3://${{ steps.bucket.outputs.bucket }}/${{ steps.pack.outputs.zip }}"

      - name: Cr√©er/Enregistrer la version d‚Äôappli
        id: appver
        shell: bash
        run: |
          set -euo pipefail
          LABEL="${{ steps.pack.outputs.zip }}"
          aws elasticbeanstalk create-application-version \
            --application-name "${APP_NAME}" \
            --version-label "$LABEL" \
            --source-bundle S3Bucket="${{ steps.bucket.outputs.bucket }}",S3Key="${{ steps.pack.outputs.zip }}" \
          || echo "Version d√©j√† existante"
          echo "label=$LABEL" >> "$GITHUB_OUTPUT"
          echo "Version: $LABEL"

      # --------- ATTENTE PRE-DEPLOIEMENT ----------
      - name: Attendre READY/GREEN (pr√©-d√©ploiement)
        shell: bash
        run: |
          set -euo pipefail
          MAX_SEC=1800      # 30 min
          SLEEP=15
          EL=0
          echo "‚è≥ Attente que ${ENV_NAME} soit Ready & Green (avant update)"

          while [ $EL -lt $MAX_SEC ]; do
            read HEALTH STATUS <<<"$(aws elasticbeanstalk describe-environments \
              --region "${AWS_REGION}" \
              --environment-names "${ENV_NAME}" \
              --query 'Environments[0].[Health,Status]' --output text || echo 'Unknown Unknown')"

            echo "HEALTH=${HEALTH}  STATUS=${STATUS}"

            # Si l'env n'existe pas encore (Launching/Unknown), on patiente
            if [[ "$STATUS" == "Ready" && "$HEALTH" == "Green" ]]; then
              echo "‚úÖ Environnement pr√™t."
              break
            fi

            sleep $SLEEP
            EL=$((EL+SLEEP))
          done

          if [[ "$STATUS" != "Ready" || "$HEALTH" != "Green" ]]; then
            echo "‚ùå ${ENV_NAME} pas pr√™t apr√®s $((MAX_SEC/60)) min"
            # Dump dernier events pour diag
            aws elasticbeanstalk describe-events \
              --region "${AWS_REGION}" \
              --environment-name "${ENV_NAME}" \
              --start-time "$(date -u -d '40 minutes ago' +%Y-%m-%dT%H:%M:%SZ)" \
              --max-records 50 \
              --query 'Events[].{Time:EventDate,Sev:Severity,Msg:Message}' \
              --output table || true
            exit 1
          fi

      - name: D√©ployer sur l‚Äôenvironnement
        shell: bash
        run: |
          set -euo pipefail
          aws elasticbeanstalk update-environment \
            --environment-name "${ENV_NAME}" \
            --version-label "${{ steps.appver.outputs.label }}"

      # --------- ATTENTE POST-DEPLOIEMENT ----------
      - name: Attendre que l‚Äôenvironnement soit GREEN
        shell: bash
        run: |
          set -euo pipefail
          MAX_SEC=2400    # 40 min (certains d√©ploiements froids sont lents)
          SLEEP=20
          EL=0
          echo "‚è≥ Attente post-d√©ploiement: Ready & Green"

          while [ $EL -lt $MAX_SEC ]; do
            OUT="$(aws elasticbeanstalk describe-environments \
              --environment-names "${ENV_NAME}" \
              --query 'Environments[0].[Health,Status]' \
              --output text || echo 'Unknown Unknown')"

            echo "RAW: $OUT"
            HEALTH=$(echo "$OUT" | awk '{print $1}')
            STATUS=$(echo "$OUT" | awk '{print $2}')

            echo "HEALTH=${HEALTH}  STATUS=${STATUS}"

            if [[ "$STATUS" == "Ready" && "$HEALTH" == "Green" ]]; then
              echo "‚úÖ Environnement Ready/Green."
              exit 0
            fi

            # Si EB signale Updating / Launching / Info -> on continue
            sleep $SLEEP
            EL=$((EL+SLEEP))
          done

          echo "‚ùå Timeout post-d√©ploiement"
          aws elasticbeanstalk describe-events \
            --region "${AWS_REGION}" \
            --environment-name "${ENV_NAME}" \
            --start-time "$(date -u -d '40 minutes ago' +%Y-%m-%dT%H:%M:%SZ)" \
            --max-records 100 \
            --query 'Events[].{Time:EventDate,Sev:Severity,Msg:Message}' \
            --output table || true
          exit 1

      - name: Test de fum√©e (/health) avec retries & backoff
        shell: bash
        run: |
          set -euo pipefail
          CNAME="$(aws elasticbeanstalk describe-environments \
            --environment-names "${ENV_NAME}" \
            --query 'Environments[0].CNAME' --output text)"
          URL="https://${CNAME}/health"
          echo "üîé Smoke test: $URL"

          # 12 tentatives (~5 min) avec backoff lin√©aire
          for i in $(seq 1 12); do
            code=$(curl -sk -o /dev/null -w "%{http_code}" "$URL" || true)
            echo "Tentative $i: HTTP $code"
            if [[ "$code" == "200" ]]; then
              echo "‚úÖ Health OK"
              exit 0
            fi
            sleep $((i*5))
          done

          echo "‚ö†Ô∏è  Health en HTTPS pas encore OK, tentative HTTP (fallback)"
          URL="http://${CNAME}/health"
          for i in $(seq 1 8); do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$URL" || true)
            echo "Tentative HTTP $i: HTTP $code"
            if [[ "$code" == "200" ]]; then
              echo "‚úÖ Health OK en HTTP"
              exit 0
            fi
            sleep $((i*5))
          done

          echo "‚ùå Smoke test KO"
          exit 1
