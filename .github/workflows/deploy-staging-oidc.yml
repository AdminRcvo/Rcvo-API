name: D√©ploiement STAGING via OIDC

on:
  push:
    branches: [ staging ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  # Emp√™che deux d√©ploiements STAGING de s'√©craser
  group: deploy-staging-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: eu-west-3
  APP_NAME: Rcvo-backend
  ENV_NAME: Rcvo-Backend-staging

jobs:
  deployer:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::409818814260:role/GithubOIDCRcvoDeploy
          aws-region: ${{ env.AWS_REGION }}

      - name: V√©rifier l‚Äôidentit√© AWS
        run: aws sts get-caller-identity

      - name: Installer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Installer d√©pendances (lockfile si pr√©sent)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Build (facultatif)
        run: npm run build --if-present

      - name: Pack ZIP (exclut node_modules & le ZIP lui-m√™me)
        id: pack
        shell: bash
        run: |
          set -euo pipefail
          TS="$(date +%Y%m%d_%H%M%S)"
          SHA="${GITHUB_SHA::7}"
          ZIP="app-${SHA}-${TS}.zip"
          echo "zip=$ZIP" >> "$GITHUB_OUTPUT"
          zip -r "$ZIP" . -x ".git/*" "node_modules/*" "$ZIP"

      - name: Bucket EB (idempotent)
        id: bucket
        shell: bash
        run: |
          set -euo pipefail
          BUCKET="$(aws elasticbeanstalk create-storage-location --region "${AWS_REGION}" --query S3Bucket --output text)"
          echo "bucket=$BUCKET" >> "$GITHUB_OUTPUT"

      - name: Upload vers S3
        run: aws s3 cp "${{ steps.pack.outputs.zip }}" "s3://${{ steps.bucket.outputs.bucket }}/${{ steps.pack.outputs.zip }}"

      - name: Cr√©er/Enregistrer la version EB (idempotent)
        id: appver
        shell: bash
        run: |
          set -euo pipefail
          LABEL="${{ steps.pack.outputs.zip }}"
          aws elasticbeanstalk create-application-version \
            --region "${AWS_REGION}" \
            --application-name "${APP_NAME}" \
            --version-label "$LABEL" \
            --source-bundle S3Bucket="${{ steps.bucket.outputs.bucket }}",S3Key="${{ steps.pack.outputs.zip }}" \
            || echo "Version d√©j√† existante"
          echo "label=$LABEL" >> "$GITHUB_OUTPUT"

      # ====== ATTENTE AVANT DEPLOIEMENT (√©vite "Must be Ready") ======
      - name: Attendre READY/GREEN (pr√©-d√©ploiement)
        shell: bash
        timeout-minutes: 10
        run: |
          set -euo pipefail
          for i in {1..60}; do  # 60 * 10s = 10 min
            HEALTH="$(aws elasticbeanstalk describe-environments --region "${AWS_REGION}" --environment-names "${ENV_NAME}" --query 'Environments[0].Health' --output text || true)"
            STATUS="$(aws elasticbeanstalk describe-environments --region "${AWS_REGION}" --environment-names "${ENV_NAME}" --query 'Environments[0].Status' --output text || true)"
            echo "PRE  -> HEALTH=$HEALTH  STATUS=$STATUS"
            if [[ "$STATUS" == "Ready" && "$HEALTH" == "Green" ]]; then
              echo "‚úÖ ${ENV_NAME} pr√™t pour d√©ploiement."
              exit 0
            fi
            sleep 10
          done
          echo "‚ùå ${ENV_NAME} non pr√™t apr√®s ~10 min (pr√©-d√©ploiement)"; exit 1

      - name: D√©ployer sur l‚Äôenvironnement
        run: |
          aws elasticbeanstalk update-environment \
            --region "${AWS_REGION}" \
            --environment-name "${ENV_NAME}" \
            --version-label "${{ steps.appver.outputs.label }}"

      # ====== ATTENTE APRES DEPLOIEMENT ======
      - name: Attendre READY/GREEN (post-d√©ploiement)
        shell: bash
        timeout-minutes: 25
        run: |
          set -euo pipefail
          for i in {1..150}; do  # 150 * 10s = 25 min
            HEALTH="$(aws elasticbeanstalk describe-environments --region "${AWS_REGION}" --environment-names "${ENV_NAME}" --query 'Environments[0].Health' --output text || true)"
            STATUS="$(aws elasticbeanstalk describe-environments --region "${AWS_REGION}" --environment-names "${ENV_NAME}" --query 'Environments[0].Status' --output text || true)"
            echo "POST -> HEALTH=$HEALTH  STATUS=$STATUS"
            if [[ "$STATUS" == "Ready" && "$HEALTH" == "Green" ]]; then
              echo "‚úÖ D√©ploiement termin√©, environnement GREEN."
              exit 0
            fi
            sleep 10
          done
          echo "‚ùå Timeout post-d√©ploiement (~25 min)"; exit 1

      - name: Test de fum√©e (/health) ‚Äì HTTPS avec fallback HTTP
        shell: bash
        run: |
          set -euo pipefail
          CNAME="$(aws elasticbeanstalk describe-environments --region "${AWS_REGION}" --environment-names "${ENV_NAME}" --query 'Environments[0].CNAME' --output text)"
          echo "CNAME=${CNAME}"
          URL_HTTPS="https://${CNAME}/health"
          URL_HTTP="http://${CNAME}/health"
          echo "Test HTTPS: ${URL_HTTPS}"
          ok=""
          for i in {1..20}; do
            code=$(curl -sk -o /dev/null -w "%{http_code}" "${URL_HTTPS}" || true)
            echo "Tentative ${i} -> HTTPS code=${code}"
            if [[ "${code}" == "200" ]]; then ok="yes"; break; fi
            sleep $((i<10 ? 3 : 6))
          done
          if [[ -z "${ok}" ]]; then
            echo "Fallback HTTP: ${URL_HTTP}"
            for i in {1..10}; do
              code=$(curl -s -o /dev/null -w "%{http_code}" "${URL_HTTP}" || true)
              echo "Tentative Fallback ${i} -> HTTP code=${code}"
              if [[ "${code}" == "200" ]]; then ok="yes"; break; fi
              sleep 5
            done
          fi
          [[ -n "${ok}" ]] || (echo "‚ùå Smoke test KO (HTTPS et HTTP)"; exit 1)
          echo "‚úÖ Smoke test OK"

      # ====== DIAG EN CAS D'ECHEC ======
      - name: (Diag) Derniers events EB
        if: failure()
        shell: bash
        run: |
          set +e
          echo "üîé describe-environments"
          aws elasticbeanstalk describe-environments --region "${AWS_REGION}" --environment-names "${ENV_NAME}" || true
          echo "üîé 50 derniers events"
          aws elasticbeanstalk describe-events --region "${AWS_REGION}" --environment-name "${ENV_NAME}" --max-items 50 \
            --query 'Events[].{Time:EventDate,Severity:Severity,Msg:Message}' --output table || true
